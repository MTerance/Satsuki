using Godot;
using Satsuki.Interfaces;
using Satsuki.Systems;
using System;
using System.Reflection;
using System.Threading.Tasks;

public partial class MainGameScene : Node, IScene
{
	private GameServerHandler _gameServerHandler;
	private bool _debugMode = true;

	public override void _Ready()
	{
		GD.Print("üéÆ MainGameScene: Initialisation...");
		
		// Cr√©er et ajouter le gestionnaire de serveur
		_gameServerHandler = new GameServerHandler();
		AddChild(_gameServerHandler);
		
		// Connecter aux √©v√©nements du gestionnaire de serveur
		_gameServerHandler.ServerStarted += OnServerStarted;
		_gameServerHandler.ServerStopped += OnServerStopped;
		_gameServerHandler.ServerError += OnServerError;
		_gameServerHandler.ClientConnected += OnClientConnected;
		_gameServerHandler.ClientDisconnected += OnClientDisconnected;
		_gameServerHandler.MessageReceived += OnMessageReceived;

		GD.Print("‚úÖ MainGameScene: Initialis√©e avec GameServerHandler");
	}

	#region IScene Implementation
	/// <summary>
	/// Retourne l'√©tat actuel de la sc√®ne de jeu (sans les donn√©es serveur)
	/// </summary>
	/// <returns>Un objet contenant l'√©tat de la sc√®ne de jeu</returns>
	public object GetSceneState()
	{
		// R√©cup√©rer la sc√®ne actuelle
		var currentScene = GetTree().CurrentScene;
		string sceneName = currentScene?.Name ?? "Unknown";
		string scenePath = currentScene?.SceneFilePath ?? "Unknown";

		// Essayer d'obtenir l'√©tat de la sc√®ne si elle a une m√©thode GetSceneState
		object sceneState = null;
		if (currentScene != null && currentScene != this)
		{
			// Utiliser la r√©flexion pour appeler GetSceneState si elle existe
			var sceneType = currentScene.GetType();
			var getSceneStateMethod = sceneType.GetMethod("GetSceneState",
				BindingFlags.Public | BindingFlags.Instance);

			if (getSceneStateMethod != null)
			{
				try
				{
					sceneState = getSceneStateMethod.Invoke(currentScene, null);
					Console.WriteLine($"‚úÖ √âtat de la sc√®ne {sceneName} r√©cup√©r√©");
				}
				catch (Exception ex)
				{
					Console.WriteLine($"‚ùå Erreur lors de la r√©cup√©ration de l'√©tat de la sc√®ne: {ex.Message}");
					sceneState = new { Error = "Failed to get scene state", Message = ex.Message };
				}
			}
			else
			{
				sceneState = new { Info = "Scene does not implement GetSceneState()" };
				Console.WriteLine($"‚ÑπÔ∏è La sc√®ne {sceneName} n'impl√©mente pas GetSceneState()");
			}
		}

		return new
		{
			Scene = new
			{
				CurrentScene = sceneName,
				ScenePath = scenePath,
				SceneState = sceneState
			},
			Debug = new
			{
				DebugMode = _debugMode,
				Timestamp = DateTime.UtcNow
			}
		};
	}

	/// <summary>
	/// M√©thode publique pour obtenir l'√©tat de la sc√®ne de jeu (utilis√©e par GameServerHandler)
	/// </summary>
	/// <returns>Un objet contenant l'√©tat de la sc√®ne de jeu</returns>
	public object GetGameSceneState()
	{
		return GetSceneState();
	}
	#endregion

	#region Server Event Handlers
	private void OnServerStarted()
	{
		GD.Print("üéÆ MainGameScene: Serveur d√©marr√© avec succ√®s!");
		SetNetworkUIEnabled(true);
	}

	private void OnServerStopped()
	{
		GD.Print("üéÆ MainGameScene: Serveur arr√™t√©");
		SetNetworkUIEnabled(false);
	}

	private void OnServerError(string error)
	{
		GD.PrintErr($"üéÆ MainGameScene: Erreur serveur - {error}");
		ShowNetworkError(error);
	}

	private void OnClientConnected(string clientId)
	{
		GD.Print($"üéÆ MainGameScene: Client connect√© - {clientId}");
		// Logique UI pour afficher la connexion d'un client
		UpdateClientList();
	}

	private void OnClientDisconnected(string clientId)
	{
		GD.Print($"üéÆ MainGameScene: Client d√©connect√© - {clientId}");
		// Logique UI pour afficher la d√©connexion d'un client
		UpdateClientList();
	}

	private void OnMessageReceived(string clientId, string content)
	{
		if (_debugMode)
		{
			GD.Print($"üéÆ MainGameScene: Message re√ßu de {clientId}: {content}");
		}
		// Logique UI pour afficher les messages si n√©cessaire
	}
	#endregion

	#region UI Management
	private void SetNetworkUIEnabled(bool enabled)
	{
		// Activer/d√©sactiver les √©l√©ments UI li√©s au r√©seau
		// Par exemple, boutons multijoueur, indicateurs de statut, etc.
		GD.Print($"üì° Interface r√©seau: {(enabled ? "Activ√©e" : "D√©sactiv√©e")}");
		
		// Ici vous pourriez mettre √† jour des √©l√©ments UI sp√©cifiques
		// Exemple : GetNode<Button>("MultiplayerButton").Disabled = !enabled;
	}

	private void ShowNetworkError(string error)
	{
		// Afficher une notification d'erreur r√©seau dans l'UI
		GD.PrintErr($"üö® Erreur r√©seau: {error}");
		
		// Ici vous pourriez afficher un popup d'erreur ou une notification
		// Exemple : GetNode<AcceptDialog>("ErrorDialog").DialogText = $"Erreur r√©seau: {error}";
		// Exemple : GetNode<AcceptDialog>("ErrorDialog").PopupCentered();
	}

	private void UpdateClientList()
	{
		// Mettre √† jour l'affichage de la liste des clients connect√©s
		if (_gameServerHandler != null)
		{
			int clientCount = _gameServerHandler.GetConnectedClientCount();
			GD.Print($"üìä Nombre de clients connect√©s: {clientCount}");
			
			// Ici vous pourriez mettre √† jour un label ou une liste dans l'UI
			// Exemple : GetNode<Label>("ClientCountLabel").Text = $"Clients: {clientCount}";
		}
	}
	#endregion

	#region Input Handling (Debug Commands)
	/// <summary>
	/// Commandes Input pour tests et debug - d√©l√®gue au GameServerHandler
	/// </summary>
	public override void _Input(InputEvent @event)
	{
		if (@event is InputEventKey keyEvent && keyEvent.Pressed && _gameServerHandler != null)
		{
			switch (keyEvent.Keycode)
			{
				case Key.F1:
					// Test d'envoi de message crypt√© √† tous les clients
					_gameServerHandler.BroadcastToAllClients("SERVER_BROADCAST:Message de test crypt√© du serveur", encrypt: true);
					break;
				case Key.F2:
					// Affiche les statistiques avec informations de cryptage (via GameServerHandler)
					GD.Print("üìä Affichage des statistiques serveur...");
					break;
				case Key.F3:
					// Liste des clients connect√©s
					_gameServerHandler.ListConnectedClients();
					break;
				case Key.F4:
					// Bascule le mode debug
					_debugMode = !_debugMode;
					_gameServerHandler.ToggleDebugMode();
					GD.Print($"üêõ Mode debug MainGameScene: {(_debugMode ? "ACTIV√â" : "D√âSACTIV√â")}");
					break;
				case Key.F5:
					// Simule un message de chat crypt√© du serveur
					_gameServerHandler.BroadcastToAllClients("CHAT:SERVER:Message crypt√© du serveur √† tous les joueurs", encrypt: true);
					break;
				case Key.F6:
					// Traite tous les messages disponibles imm√©diatement
					_gameServerHandler.ProcessMessagesHighFrequency();
					break;
				case Key.F7:
					// Traite seulement les 5 prochains messages
					_gameServerHandler.ProcessLimitedMessages(5);
					break;
				case Key.F8:
					// Bascule le cryptage on/off
					_gameServerHandler.ToggleEncryption();
					break;
				case Key.F9:
					// G√©n√®re une nouvelle cl√© de cryptage
					_gameServerHandler.GenerateNewEncryptionKey();
					break;
				case Key.F10:
					// Obtient l'√©tat complet du jeu
					var gameState = _gameServerHandler.GetCompleteGameState();
					GD.Print("üéÆ √âtat complet du jeu r√©cup√©r√©");
					break;
			}
		}
	}
	#endregion

	#region Scene Management
	public void ChangeScene(string scenePath = "res://Scenes/OtherScene.tscn")
	{
		GetTree().ChangeSceneToFile(scenePath);
	}

	/// <summary>
	/// M√©thode pour obtenir des informations sur la sc√®ne actuelle
	/// </summary>
	/// <returns>Informations sur la sc√®ne actuelle</returns>
	public object GetCurrentSceneInfo()
	{
		var currentScene = GetTree().CurrentScene;
		return new
		{
			Name = currentScene?.Name ?? "Unknown",
			Path = currentScene?.SceneFilePath ?? "Unknown",
			Type = currentScene?.GetType().Name ?? "Unknown",
			IsMainGameScene = currentScene == this
		};
	}
	#endregion

	#region Public API for Server Access
	/// <summary>
	/// Obtient une r√©f√©rence au gestionnaire de serveur
	/// </summary>
	/// <returns>Instance du GameServerHandler</returns>
	public GameServerHandler GetServerHandler()
	{
		return _gameServerHandler;
	}

	/// <summary>
	/// Envoie un message √† un client sp√©cifique via le gestionnaire de serveur
	/// </summary>
	/// <param name="clientId">ID du client</param>
	/// <param name="message">Message √† envoyer</param>
	/// <param name="encrypt">Si true, crypte le message</param>
	public void SendMessageToClient(string clientId, string message, bool encrypt = true)
	{
		_gameServerHandler?.SendMessageToClient(clientId, message, encrypt);
	}

	/// <summary>
	/// Diffuse un message √† tous les clients via le gestionnaire de serveur
	/// </summary>
	/// <param name="message">Message √† diffuser</param>
	/// <param name="encrypt">Si true, crypte le message</param>
	public void BroadcastMessage(string message, bool encrypt = true)
	{
		_gameServerHandler?.BroadcastToAllClients(message, encrypt);
	}

	/// <summary>
	/// Obtient le nombre de clients connect√©s
	/// </summary>
	/// <returns>Nombre de clients connect√©s</returns>
	public int GetConnectedClientCount()
	{
		return _gameServerHandler?.GetConnectedClientCount() ?? 0;
	}
	#endregion

	#region Cleanup
	public override void _ExitTree()
	{
		// D√©connecter les √©v√©nements du gestionnaire de serveur
		if (_gameServerHandler != null)
		{
			_gameServerHandler.ServerStarted -= OnServerStarted;
			_gameServerHandler.ServerStopped -= OnServerStopped;
			_gameServerHandler.ServerError -= OnServerError;
			_gameServerHandler.ClientConnected -= OnClientConnected;
			_gameServerHandler.ClientDisconnected -= OnClientDisconnected;
			_gameServerHandler.MessageReceived -= OnMessageReceived;
		}
		
		GD.Print("üßπ MainGameScene: Nettoyage termin√©");
	}
	#endregion
}
