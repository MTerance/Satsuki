import bpy
from bpy.types import Panel

class CITYGEN_PT_Panel(Panel):
    bl_label = "City Block Generator"
    bl_idname = "CITYGEN_PT_Panel"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'UI'
    bl_category = "CityGen"

    def draw(self, context):
        """Interface utilisateur simplifi√©e avec propri√©t√©s directes"""
        layout = self.layout
        scene = context.scene
        
        # V√©rifier l'existence des propri√©t√©s directes
        required_props = [
            'citygen_width', 'citygen_length', 'citygen_max_floors', 'citygen_road_width', 
            'citygen_buildings_per_block', 'citygen_seamless_roads', 'citygen_building_variety', 
            'citygen_height_variation', 'citygen_organic_mode', 'citygen_road_first_method',
            'citygen_density_variation', 'citygen_age_variation', 'citygen_mixed_use', 
            'citygen_landmark_frequency', 'citygen_plaza_frequency', 'citygen_street_life', 
            'citygen_weathering', 'citygen_irregular_lots', 'citygen_growth_pattern'
        ]
        missing_props = [prop for prop in required_props if not hasattr(scene, prop)]
        
        if missing_props:
            layout.alert = True
            layout.label(text="Propri√©t√©s non initialis√©es", icon='ERROR')
            layout.label(text="Red√©marrez Blender ou rechargez l'addon")
            return
        
        # Interface des param√®tres de base
        layout.label(text="Param√®tres de g√©n√©ration:", icon='SETTINGS')
        
        # ‚ö†Ô∏è AVERTISSEMENTS DE S√âCURIT√â
        total_blocks = scene.citygen_width * scene.citygen_length
        total_buildings = total_blocks * scene.citygen_buildings_per_block
        
        # V√©rifications de s√©curit√©
        if total_blocks > 25:
            warning_box = layout.box()
            warning_box.alert = True
            warning_box.label(text="‚ö†Ô∏è ATTENTION: Configuration dangereuse!", icon='ERROR')
            warning_box.label(text=f"Blocs: {total_blocks} (MAX recommand√©: 25)")
            warning_box.label(text="R√©duisez largeur/longueur pour √©viter crashes")
        elif total_buildings > 35:
            warning_box = layout.box()
            warning_box.alert = True
            warning_box.label(text="‚ö†Ô∏è PERFORMANCE: Beaucoup de b√¢timents", icon='INFO')
            warning_box.label(text=f"B√¢timents: {total_buildings} (MAX recommand√©: 35)")
        else:
            # Indication s√©curis√©e
            safe_box = layout.box()
            safe_box.label(text=f"‚úÖ Configuration s√ªre: {total_blocks} blocs, {total_buildings} b√¢timents", icon='CHECKMARK')
        
        layout.separator()
        
        # Grille des param√®tres
        grid = layout.grid_flow(columns=2, align=True)
        
        # Largeur et longueur
        grid.prop(scene, "citygen_width", text="Largeur")
        grid.prop(scene, "citygen_length", text="Longueur")
        
        # √âtages et routes
        grid.prop(scene, "citygen_max_floors", text="√âtages max")
        grid.prop(scene, "citygen_road_width", text="Routes")
        
        # Nouveaux param√®tres
        grid.prop(scene, "citygen_buildings_per_block", text="B√¢t./Bloc")
        grid.prop(scene, "citygen_seamless_roads", text="Routes coll√©es")
        
        layout.separator()
        
        # Section vari√©t√© des b√¢timents
        layout.label(text="Vari√©t√© des b√¢timents:", icon='HOME')
        
        # Param√®tres de vari√©t√©
        variety_grid = layout.grid_flow(columns=1, align=True)
        variety_grid.prop(scene, "citygen_building_variety", text="Formes")
        variety_grid.prop(scene, "citygen_height_variation", text="Hauteurs")
        
        layout.separator()
        
        # Section Mode Organique
        layout.label(text="Mode Organique:", icon='OUTLINER_OB_MESH')
        organic_box = layout.box()
        organic_box.prop(scene, "citygen_organic_mode", text="Activer Mode Organique")
        
        # Afficher les contr√¥les organiques seulement si le mode est activ√©
        if scene.citygen_organic_mode:
            organic_col = organic_box.column(align=True)
            
            # === NOUVELLE M√âTHODE ROUTES D'ABORD ===
            method_box = organic_col.box()
            method_col = method_box.column(align=True)
            method_col.label(text="üõ£Ô∏è NOUVEAU : M√©thode Routes d'Abord", icon='FORWARD')
            method_col.prop(scene, "citygen_road_first_method", text="Routes ‚Üí Blocs ‚Üí B√¢timents")
            
            if getattr(scene, 'citygen_road_first_method', True):
                method_col.label(text="‚úÖ Routes cr√©√©es en premier", icon='INFO')
                method_col.label(text="   Blocs g√©n√©r√©s dans les espaces")
            else:
                method_col.label(text="‚ö†Ô∏è Ancienne m√©thode (peut bugger)", icon='ERROR')
            
            organic_col.separator()
            
            # Contr√¥les pour les courbes et variations
            organic_col.label(text="Param√®tres Organiques:")
            organic_col.prop(scene, "citygen_road_curve_intensity", text="Courbes Routes")
            organic_col.prop(scene, "citygen_block_size_variation", text="Variation Blocs")
            organic_col.prop(scene, "citygen_growth_pattern", text="Croissance")
        
        layout.separator()
        
        # === SECTION R√âALISME URBAIN ===
        layout.label(text="R√©alisme Urbain:", icon='WORLD')
        
        # Colonne principale r√©alisme
        realism_box = layout.box()
        realism_col = realism_box.column(align=True)
        
        # Param√®tres de densit√© et variation
        realism_col.label(text="Densit√© et Variation:")
        density_grid = realism_col.grid_flow(columns=2, align=True)
        density_grid.prop(scene, "citygen_density_variation", text="Densit√©")
        density_grid.prop(scene, "citygen_weathering", text="Usure")
        
        # Options bool√©ennes
        realism_col.separator(factor=0.5)
        realism_col.label(text="Options R√©alisme:")
        bool_grid = realism_col.grid_flow(columns=2, align=True)
        bool_grid.prop(scene, "citygen_age_variation", text="√Çges Vari√©s")
        bool_grid.prop(scene, "citygen_mixed_use", text="Zones Mixtes")
        bool_grid.prop(scene, "citygen_irregular_lots", text="Parcelles Irr√©g.")
        bool_grid.prop(scene, "citygen_street_life", text="Vie de Rue")
        
        # Fr√©quences
        realism_col.separator(factor=0.5)
        realism_col.label(text="Fr√©quences:")
        freq_grid = realism_col.grid_flow(columns=2, align=True)
        freq_grid.prop(scene, "citygen_landmark_frequency", text="Monuments")
        freq_grid.prop(scene, "citygen_plaza_frequency", text="Places")
        
        layout.separator()
        
        # Section g√©n√©ration
        layout.label(text="Actions:", icon='PLAY')
        col = layout.column(align=True)
        col.scale_y = 1.2
        col.operator("citygen.generate_city", text="G√©n√©rer Quartier", icon='MESH_CUBE')
        col.operator("citygen.regenerate_roads_sidewalks", text="R√©g√©n√©rer Routes", icon='MOD_BUILD')
        
        layout.separator()
        
        # Section outils
        layout.label(text="Outils:", icon='TOOL_SETTINGS')
        col = layout.column(align=True)
        col.operator("citygen.diagnostic", text="Diagnostic", icon='CONSOLE')

classes = [CITYGEN_PT_Panel]

def register():
    for cls in classes:
        bpy.utils.register_class(cls)

def unregister():
    for cls in reversed(classes):
        bpy.utils.unregister_class(cls)
