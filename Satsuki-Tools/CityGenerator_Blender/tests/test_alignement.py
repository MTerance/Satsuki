# TEST MODES ET ALIGNEMENT - City Block Generator
# √Ä ex√©cuter dans l'√©diteur de texte de Blender

import bpy

def test_all_modes():
    """Test de tous les modes disponibles avec alignement."""
    
    print("=== TEST COMPLET MODES ET ALIGNEMENT ===")
    
    # V√©rifier l'addon
    if not hasattr(bpy.context.scene, 'citygen_props'):
        print("‚ùå Addon City Block Generator non activ√©")
        return False
    
    props = bpy.context.scene.citygen_props
    
    # Test 1: Mode Normal (sans districts)
    print("\nüîπ TEST 1: Mode Normal")
    test_normal_mode(props)
    
    # Test 2: Mode District Commercial
    print("\nüîπ TEST 2: Mode District - Dominante Commerciale") 
    test_commercial_district(props)
    
    # Test 3: Mode District R√©sidentiel
    print("\nüîπ TEST 3: Mode District - Dominante R√©sidentielle")
    test_residential_district(props)
    
    # Test 4: Mode District Industriel
    print("\nüîπ TEST 4: Mode District - Dominante Industrielle")
    test_industrial_district(props)
    
    return True

def test_normal_mode(props):
    """Test du mode normal sans districts."""
    
    # Nettoyer la sc√®ne
    bpy.ops.object.select_all(action='SELECT')
    bpy.ops.object.delete(use_global=False)
    
    # Configuration mode normal
    props.width = 4
    props.length = 4  
    props.max_floors = 8
    props.block_variety = 'MEDIUM'
    props.base_block_size = 10.0
    props.district_mode = False  # ‚Üê MODE NORMAL
    
    print(f"  Configuration: {props.width}x{props.length}, vari√©t√© {props.block_variety}")
    print(f"  Mode district: {props.district_mode}")
    
    # G√©n√©rer et analyser
    generate_and_analyze("Mode Normal")

def test_commercial_district(props):
    """Test du mode district avec dominante commerciale."""
    
    # Nettoyer la sc√®ne
    bpy.ops.object.select_all(action='SELECT')
    bpy.ops.object.delete(use_global=False)
    
    # Configuration district commercial
    props.width = 5
    props.length = 5
    props.max_floors = 15
    props.block_variety = 'HIGH'
    props.base_block_size = 12.0
    props.district_mode = True  # ‚Üê MODE DISTRICT ACTIV√â
    props.commercial_ratio = 0.6  # ‚Üê 60% COMMERCIAL
    props.residential_ratio = 0.3
    props.industrial_ratio = 0.1
    
    print(f"  Configuration: {props.width}x{props.length}, vari√©t√© {props.block_variety}")
    print(f"  Mode district: {props.district_mode}")
    print(f"  Ratios: C={props.commercial_ratio}, R={props.residential_ratio}, I={props.industrial_ratio}")
    
    # G√©n√©rer et analyser
    generate_and_analyze("District Commercial")

def test_residential_district(props):
    """Test du mode district avec dominante r√©sidentielle."""
    
    # Nettoyer la sc√®ne  
    bpy.ops.object.select_all(action='SELECT')
    bpy.ops.object.delete(use_global=False)
    
    # Configuration district r√©sidentiel
    props.width = 6
    props.length = 6
    props.max_floors = 10
    props.block_variety = 'HIGH'
    props.base_block_size = 10.0
    props.district_mode = True  # ‚Üê MODE DISTRICT ACTIV√â
    props.commercial_ratio = 0.2
    props.residential_ratio = 0.7  # ‚Üê 70% R√âSIDENTIEL
    props.industrial_ratio = 0.1
    
    print(f"  Configuration: {props.width}x{props.length}, vari√©t√© {props.block_variety}")
    print(f"  Mode district: {props.district_mode}")
    print(f"  Ratios: C={props.commercial_ratio}, R={props.residential_ratio}, I={props.industrial_ratio}")
    
    # G√©n√©rer et analyser
    generate_and_analyze("District R√©sidentiel")

def test_industrial_district(props):
    """Test du mode district avec dominante industrielle."""
    
    # Nettoyer la sc√®ne
    bpy.ops.object.select_all(action='SELECT')
    bpy.ops.object.delete(use_global=False)
    
    # Configuration district industriel
    props.width = 4
    props.length = 5
    props.max_floors = 6
    props.block_variety = 'EXTREME'
    props.base_block_size = 15.0
    props.district_mode = True  # ‚Üê MODE DISTRICT ACTIV√â
    props.commercial_ratio = 0.1
    props.residential_ratio = 0.3
    props.industrial_ratio = 0.6  # ‚Üê 60% INDUSTRIEL
    
    print(f"  Configuration: {props.width}x{props.length}, vari√©t√© {props.block_variety}")
    print(f"  Mode district: {props.district_mode}")
    print(f"  Ratios: C={props.commercial_ratio}, R={props.residential_ratio}, I={props.industrial_ratio}")
    
    # G√©n√©rer et analyser
    generate_and_analyze("District Industriel")

def generate_and_analyze(mode_name):
    """G√©n√®re et analyse le r√©sultat."""
    
    try:
        result = bpy.ops.citygen.generate_city()
        if result == {'FINISHED'}:
            print(f"  ‚úÖ {mode_name} g√©n√©r√© avec succ√®s")
            analyze_quick(mode_name)
        else:
            print(f"  ‚ùå √âchec g√©n√©ration {mode_name}")
    except Exception as e:
        print(f"  ‚ùå Erreur {mode_name}: {e}")

def analyze_quick(mode_name):
    """Analyse rapide des objets g√©n√©r√©s."""
    
    # Compter les objets
    roads = [obj for obj in bpy.context.scene.objects if 'road' in obj.name.lower()]
    sidewalks = [obj for obj in bpy.context.scene.objects if 'sidewalk' in obj.name.lower()]
    buildings = [obj for obj in bpy.context.scene.objects if 'batiment' in obj.name.lower()]
    
    print(f"    üìä Objets: {len(buildings)} b√¢timents, {len(roads)} routes, {len(sidewalks)} trottoirs")
    
    # Analyser les mat√©riaux (indicateur de districts)
    materials = set()
    for obj in bpy.context.scene.objects:
        if obj.data and hasattr(obj.data, 'materials'):
            for mat in obj.data.materials:
                if mat:
                    materials.add(mat.name)
    
    district_materials = [mat for mat in materials if 'District' in mat]
    if district_materials:
        print(f"    üé® Mat√©riaux districts: {', '.join(district_materials)}")
    else:
        print(f"    üé® Mat√©riaux standard: {len(materials)} total")
    
    print(f"    üí° Regardez la vue 3D pour voir le style {mode_name}")

# Interface utilisateur simple
def quick_test_alignment():
    """Test rapide d'alignement seulement."""
    
    print("=== TEST ALIGNEMENT RAPIDE ===")
    
    if not hasattr(bpy.context.scene, 'citygen_props'):
        print("‚ùå Addon non activ√©")
        return False
    
    props = bpy.context.scene.citygen_props
    
    # Configuration simple pour alignement
    props.width = 3
    props.length = 3
    props.max_floors = 5
    props.block_variety = 'UNIFORM'
    props.base_block_size = 10.0
    props.district_mode = False
    
    # Nettoyer et g√©n√©rer
    bpy.ops.object.select_all(action='SELECT')
    bpy.ops.object.delete(use_global=False)
    
    try:
        result = bpy.ops.citygen.generate_city()
        if result == {'FINISHED'}:
            print("‚úÖ Test alignement r√©ussi")
            return True
        else:
            print("‚ùå √âchec test alignement")
            return False
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

# Choisir le test √† ex√©cuter
print("üéØ TESTS DISPONIBLES:")
print("1. test_all_modes() - Test complet de tous les modes")
print("2. quick_test_alignment() - Test rapide alignement seulement")
print("\nCopiez-collez l'une de ces lignes pour ex√©cuter:")
print("success = test_all_modes()")
print("success = quick_test_alignment()")

# Ex√©cution par d√©faut (changez selon vos besoins)
success = quick_test_alignment()
if success:
    print("\nüéâ Test termin√© ! V√©rifiez la vue 3D")
else:
    print("\n‚ùå Test √©chou√©")
# Choisir le test √† ex√©cuter
print("üéØ TESTS DISPONIBLES:")
print("1. test_all_modes() - Test complet de tous les modes")
print("2. quick_test_alignment() - Test rapide alignement seulement")
print("\nCopiez-collez l'une de ces lignes pour ex√©cuter:")
print("success = test_all_modes()")
print("success = quick_test_alignment()")

# Ex√©cution par d√©faut (changez selon vos besoins)
success = quick_test_alignment()
if success:
    print("\nüéâ Test termin√© ! V√©rifiez la vue 3D")
else:
    print("\n‚ùå Test √©chou√©")
