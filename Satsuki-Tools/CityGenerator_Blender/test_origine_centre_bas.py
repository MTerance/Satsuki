# Test de l'origine centre bas pour City Block Generator
# √Ä ex√©cuter dans la console Python de Blender

import bpy

print("üß™ TEST ORIGINE CENTRE BAS - CITY BLOCK GENERATOR")
print("="*60)

# Supprimer tous les objets existants
bpy.ops.object.select_all(action='SELECT')
bpy.ops.object.delete(use_global=False)

# Test 1: Cr√©er un cube avec la nouvelle fonction
print("\n1Ô∏è‚É£ Test cr√©ation cube avec origine centre bas:")
try:
    # Importer les fonctions du module
    import sys
    if "city_block_generator_6_12" in sys.modules:
        from city_block_generator_6_12.generator import create_cube_with_center_bottom_origin, set_origin_to_center_bottom
        
        # Cr√©er un cube test
        cube = create_cube_with_center_bottom_origin(4, 6, 8, (0, 0, 0))
        
        if cube:
            print(f"   ‚úÖ Cube cr√©√©: {cube.name}")
            print(f"   üìç Position: x={cube.location.x}, y={cube.location.y}, z={cube.location.z}")
            print(f"   üìè Dimensions: {cube.dimensions.x:.2f} x {cube.dimensions.y:.2f} x {cube.dimensions.z:.2f}")
            
            # V√©rifier que l'origine est au centre bas
            mesh = cube.data
            if mesh.vertices:
                z_coords = [v.co.z for v in mesh.vertices]
                z_min = min(z_coords)
                z_max = max(z_coords)
                print(f"   üìê Z mesh: min={z_min:.3f}, max={z_max:.3f}")
                
                if abs(z_min) < 0.001:  # Z minimum proche de 0
                    print("   ‚úÖ Origine correctement plac√©e au centre bas")
                else:
                    print("   ‚ùå Origine incorrecte")
        else:
            print("   ‚ùå √âchec cr√©ation cube")
            
    else:
        print("   ‚ùå Module city_block_generator_6_12 non charg√©")

except Exception as e:
    print(f"   ‚ùå Erreur: {e}")

# Test 2: G√©n√©rer une petite ville
print("\n2Ô∏è‚É£ Test g√©n√©ration ville 2x2:")
try:
    if hasattr(bpy.context.scene, 'citygen_props'):
        props = bpy.context.scene.citygen_props
        
        # Configurer pour un test simple
        props.width = 2
        props.length = 2
        props.max_floors = 3
        props.road_width = 2.0
        props.sidewalk_width = 0.5
        
        # G√©n√©rer la ville
        from city_block_generator_6_12.generator import generate_city
        success = generate_city(bpy.context)
        
        if success:
            print("   ‚úÖ Ville g√©n√©r√©e avec succ√®s")
            
            # Analyser les objets cr√©√©s
            objects_by_type = {
                'buildings': [],
                'roads': [],
                'sidewalks': []
            }
            
            for obj in bpy.data.objects:
                if obj.name.startswith('batiment'):
                    objects_by_type['buildings'].append(obj)
                elif obj.name.startswith('road'):
                    objects_by_type['roads'].append(obj)
                elif obj.name.startswith('sidewalk'):
                    objects_by_type['sidewalks'].append(obj)
            
            print(f"   üìä Objets cr√©√©s:")
            print(f"      ‚Ä¢ B√¢timents: {len(objects_by_type['buildings'])}")
            print(f"      ‚Ä¢ Routes: {len(objects_by_type['roads'])}")
            print(f"      ‚Ä¢ Trottoirs: {len(objects_by_type['sidewalks'])}")
            
            # V√©rifier les positions des b√¢timents
            print(f"   üìç Positions des b√¢timents:")
            for i, building in enumerate(objects_by_type['buildings'][:3]):  # Premiers 3 seulement
                loc = building.location
                dim = building.dimensions
                print(f"      ‚Ä¢ {building.name}: pos=({loc.x:.2f}, {loc.y:.2f}, {loc.z:.2f}), dim=({dim.x:.2f}, {dim.y:.2f}, {dim.z:.2f})")
                
                # V√©rifier que le b√¢timent est au-dessus du sol
                if loc.z > 0:
                    print(f"        ‚úÖ Au-dessus du sol (z={loc.z:.3f})")
                else:
                    print(f"        ‚ùå Sous le sol (z={loc.z:.3f})")
                    
        else:
            print("   ‚ùå √âchec g√©n√©ration ville")
    else:
        print("   ‚ùå Propri√©t√©s citygen_props non disponibles")
        
except Exception as e:
    print(f"   ‚ùå Erreur: {e}")
    import traceback
    traceback.print_exc()

# Test 3: V√©rification de l'alignement
print("\n3Ô∏è‚É£ Test alignement des objets:")
try:
    roads = [obj for obj in bpy.data.objects if obj.name.startswith('road')]
    sidewalks = [obj for obj in bpy.data.objects if obj.name.startswith('sidewalk')]
    buildings = [obj for obj in bpy.data.objects if obj.name.startswith('batiment')]
    
    print(f"   üìè V√©rification des hauteurs Z:")
    
    # Routes doivent √™tre au niveau le plus bas
    if roads:
        road_z = roads[0].location.z
        print(f"      ‚Ä¢ Routes: z={road_z:.3f} (plus bas)")
        
    # Trottoirs l√©g√®rement au-dessus
    if sidewalks:
        sidewalk_z = sidewalks[0].location.z
        print(f"      ‚Ä¢ Trottoirs: z={sidewalk_z:.3f} (au-dessus routes)")
        
    # B√¢timents encore au-dessus
    if buildings:
        building_z = buildings[0].location.z
        print(f"      ‚Ä¢ B√¢timents: z={building_z:.3f} (au-dessus trottoirs)")
        
        # V√©rifier l'ordre des hauteurs
        if roads and sidewalks and buildings:
            if road_z < sidewalk_z < building_z:
                print("   ‚úÖ Ordre des hauteurs correct: routes < trottoirs < b√¢timents")
            else:
                print("   ‚ùå Ordre des hauteurs incorrect")
    
except Exception as e:
    print(f"   ‚ùå Erreur: {e}")

print("\n" + "="*60)
print("üèÅ TEST TERMIN√â")
print("\nüí° Instructions:")
print("   1. V√©rifiez la vue 3D pour voir les objets")
print("   2. Tous les objets devraient avoir leur origine au centre bas")
print("   3. Les b√¢timents doivent √™tre align√©s sur les trottoirs")
print("   4. Les routes doivent s'aligner parfaitement")
print("="*60)
