#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
RESTAURATION TOKYO v2.1.8 WORKING
==================================

Retour √† la version qui fonctionne avec le bon format ZIP.
"""

import os
import shutil
import zipfile

def restore_working_version():
    """Restaurer la version v2.1.8 qui fonctionne"""
    
    print("\n" + "="*70)
    print("RESTAURATION TOKYO v2.1.8 WORKING")
    print("="*70)
    
    # Chemins
    base_path = r"c:\Users\sshom\source\repos\Satsuki\Satsuki-Tools\CityGenerator_Blender\city_block_generator_6_12"
    source_dir = os.path.join(base_path, "TOKYO_SIMPLE_V2_1")
    source_file = os.path.join(source_dir, "__init__.py")
    
    # ZIP avec structure correcte
    zip_destination = os.path.join(r"c:\Users\sshom\Documents\assets\Tools", "tokyo_v2_1_8_WORKING.zip")
    
    print(f"\nüìÅ RESTAURATION VERSION WORKING:")
    print(f"   Source: {source_file}")
    print(f"   ZIP destination: {zip_destination}")
    
    # 1. V√©rifier le fichier source v2.1.8
    if not os.path.exists(source_file):
        print(f"   ‚ùå ERREUR: Fichier source v2.1.8 non trouv√©: {source_file}")
        return False
    
    print(f"   ‚úÖ Fichier source v2.1.8: {os.path.getsize(source_file)} bytes")
    
    # 2. Cr√©er ZIP avec BONNE structure
    print(f"\nüì¶ CR√âATION ZIP v2.1.8 WORKING:")
    print("-" * 50)
    
    try:
        os.makedirs(os.path.dirname(zip_destination), exist_ok=True)
        
        with zipfile.ZipFile(zip_destination, 'w', zipfile.ZIP_DEFLATED) as zipf:
            # Structure correcte pour Blender
            folder_name = "tokyo_simple_v2_1_8"
            zipf.write(source_file, f"{folder_name}/__init__.py")
            print(f"   ‚úÖ Ajout√©: {folder_name}/__init__.py")
        
        print(f"   ‚úÖ ZIP v2.1.8 cr√©√©: {zip_destination}")
        print(f"   üìè Taille: {os.path.getsize(zip_destination)} bytes")
        
    except Exception as e:
        print(f"   ‚ùå ERREUR cr√©ation ZIP: {e}")
        return False
    
    # 3. Nettoyer Blender des versions probl√©matiques
    print(f"\nüßπ NETTOYAGE VERSIONS PROBL√âMATIQUES:")
    print("-" * 50)
    
    blender_addons = r"c:\Users\sshom\AppData\Roaming\Blender Foundation\Blender\4.0\scripts\addons"
    
    if os.path.exists(blender_addons):
        # Supprimer les versions v2.1.9 qui posent probl√®me
        problematic_versions = []
        for item in os.listdir(blender_addons):
            if any(keyword in item.lower() for keyword in ["tokyo", "organic", "v2_1_9"]):
                problematic_versions.append(item)
        
        for problem_version in problematic_versions:
            problem_path = os.path.join(blender_addons, problem_version)
            try:
                if os.path.isdir(problem_path):
                    shutil.rmtree(problem_path)
                    print(f"   üóëÔ∏è  Supprim√© version probl√©matique: {problem_version}")
                else:
                    os.remove(problem_path)
                    print(f"   üóëÔ∏è  Supprim√© fichier probl√©matique: {problem_version}")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Erreur suppression {problem_version}: {e}")
    
    # 4. V√©rifier le contenu de la v2.1.8
    print(f"\nüîç V√âRIFICATION v2.1.8:")
    print("-" * 50)
    
    try:
        with open(source_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        features = [
            ("TOKYO_SIMPLE_OT_generate", "‚úÖ G√©n√©rateur principal"),
            ("apply_building_material_by_type", "‚úÖ 8 types de b√¢timents"),
            ("create_intersection_sidewalks", "‚úÖ Trottoirs aux intersections"), 
            ("add_single_diagonal", "‚úÖ Routes diagonales"),
            ("v2.1.8 STABLE", "‚úÖ Interface v2.1.8"),
        ]
        
        for check, description in features:
            if check in content:
                print(f"   {description}")
            else:
                print(f"   ‚ùå MANQUE: {description}")
        
    except Exception as e:
        print(f"   ‚ùå Erreur lecture: {e}")
    
    # 5. Instructions de restauration
    print(f"\nüìã INSTRUCTIONS RESTAURATION:")
    print("-" * 50)
    print(f"   1. **FERMEZ BLENDER** compl√®tement")
    print(f"   2. **RED√âMARREZ BLENDER**")
    print(f"   3. Edit > Preferences > Add-ons")
    print(f"   4. **D√âSACTIVEZ/SUPPRIMEZ** toutes les versions Tokyo existantes")
    print(f"   5. Cliquez **'Install...'**")
    print(f"   6. S√©lectionnez: {zip_destination}")
    print(f"   7. **ACTIVEZ** 'Tokyo City Generator v2.1.8'")
    print(f"   8. Vue 3D > **'N'** > onglet **'Tokyo'**")
    print(f"   9. Vous devriez voir: 'Tokyo Generator v2.1.8 STABLE'")
    
    # 6. Test rapide recommand√©
    print(f"\nüéØ TEST RAPIDE RECOMMAND√â:")
    print("-" * 50)
    print(f"   ‚Ä¢ Taille: 5x5")
    print(f"   ‚Ä¢ Style: Mixed")
    print(f"   ‚Ä¢ Densit√©: 0.8")
    print(f"   ‚Ä¢ Better Materials: ‚úÖ")
    print(f"   ‚Ä¢ Changez le mode en 'Material Preview' pour voir les couleurs")
    
    print(f"\n‚ö†Ô∏è  POURQUOI CETTE VERSION:")
    print("-" * 50)
    print(f"   ‚Ä¢ La v2.1.8 FONCTIONNE et g√©n√®re une ville compl√®te")
    print(f"   ‚Ä¢ La v2.1.9 √©tait trop complexe et a des bugs")
    print(f"   ‚Ä¢ Cette version a √©t√© test√©e et valid√©e")
    print(f"   ‚Ä¢ Vous aurez des b√¢timents, routes, trottoirs ET diagonales")
    
    print("="*70)
    return True

if __name__ == "__main__":
    success = restore_working_version()
    if success:
        print("\nüîÑ VERSION WORKING RESTAUR√âE!")
        print("üì¶ Utilisez: tokyo_v2_1_8_WORKING.zip")
        print("‚úÖ Cette version FONCTIONNE et g√©n√®re une ville compl√®te!")
    else:
        print("\nüí• RESTAURATION √âCHOU√âE!")