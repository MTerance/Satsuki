# Script de diagnostic rapide pour v√©rifier pourquoi les textures n'apparaissent pas
# √Ä ex√©cuter dans Blender pour identifier le probl√®me

import bpy
import os

def diagnostic_textures_buildings():
    """Diagnostic complet pour textures de b√¢timents"""
    
    print("=" * 60)
    print("üîç DIAGNOSTIC TEXTURES B√ÇTIMENTS TOKYO")
    print("=" * 60)
    
    # Test 1: V√©rifier l'addon
    print("\n1. V√âRIFICATION ADDON:")
    addon_enabled = False
    for addon in bpy.context.preferences.addons:
        if 'tokyo' in addon.module.lower():
            print(f"   ‚úÖ Addon trouv√©: {addon.module}")
            addon_enabled = True
            break
    
    if not addon_enabled:
        print("   ‚ùå Addon Tokyo non trouv√© ou non activ√©")
        return
    
    # Test 2: V√©rifier les propri√©t√©s de sc√®ne
    print("\n2. PROPRI√âT√âS DE SC√àNE:")
    scene = bpy.context.scene
    
    if hasattr(scene, 'tokyo_use_advanced_textures'):
        print(f"   ‚úÖ tokyo_use_advanced_textures: {scene.tokyo_use_advanced_textures}")
    else:
        print("   ‚ùå tokyo_use_advanced_textures manquante")
    
    if hasattr(scene, 'tokyo_texture_base_path'):
        path = scene.tokyo_texture_base_path
        print(f"   üìÅ tokyo_texture_base_path: {path}")
        if path and os.path.exists(path):
            print("   ‚úÖ Chemin existe")
        else:
            print("   ‚ùå Chemin invalide ou vide")
    else:
        print("   ‚ùå tokyo_texture_base_path manquante")
    
    # Test 3: V√©rifier les objets Tokyo
    print("\n3. OBJETS TOKYO DANS LA SC√àNE:")
    tokyo_objects = [obj for obj in bpy.data.objects if 'tokyo' in obj.name.lower()]
    
    if tokyo_objects:
        print(f"   ‚úÖ {len(tokyo_objects)} objets Tokyo trouv√©s:")
        for obj in tokyo_objects[:5]:  # Limiter √† 5 pour l'affichage
            print(f"      - {obj.name}")
    else:
        print("   ‚ùå Aucun objet Tokyo trouv√©")
        print("   üí° G√©n√©rez d'abord un district Tokyo")
        return
    
    # Test 4: V√©rifier les mat√©riaux
    print("\n4. MAT√âRIAUX TOKYO:")
    tokyo_materials = [mat for mat in bpy.data.materials if 'tokyo' in mat.name.lower()]
    
    if tokyo_materials:
        print(f"   ‚úÖ {len(tokyo_materials)} mat√©riaux Tokyo trouv√©s:")
        for mat in tokyo_materials[:3]:
            print(f"      - {mat.name}")
            if mat.use_nodes:
                print("        ‚úÖ Nodes activ√©s")
                nodes = mat.node_tree.nodes
                texture_nodes = [n for n in nodes if n.type == 'TEX_IMAGE']
                print(f"        üìÑ {len(texture_nodes)} texture nodes")
            else:
                print("        ‚ùå Nodes d√©sactiv√©s")
    else:
        print("   ‚ùå Aucun mat√©riau Tokyo trouv√©")
    
    # Test 5: V√©rifier le mode d'affichage
    print("\n5. MODE D'AFFICHAGE:")
    for area in bpy.context.screen.areas:
        if area.type == 'VIEW_3D':
            for space in area.spaces:
                if space.type == 'VIEW_3D':
                    mode = space.shading.type
                    print(f"   üé® Mode actuel: {mode}")
                    if mode in ['MATERIAL', 'RENDERED']:
                        print("   ‚úÖ Mode compatible avec textures")
                    else:
                        print("   ‚ùå Mode incompatible - passez en Material Preview ou Rendered")
                    break
    
    # Test 6: Diagnostic sp√©cifique au premier objet
    if tokyo_objects:
        print(f"\n6. DIAGNOSTIC D√âTAILL√â - {tokyo_objects[0].name}:")
        obj = tokyo_objects[0]
        
        if obj.data.materials:
            mat = obj.data.materials[0]
            print(f"   üì¶ Mat√©riau: {mat.name}")
            
            if mat.use_nodes and mat.node_tree:
                nodes = mat.node_tree.nodes
                print(f"   üîó Nodes: {len(nodes)} trouv√©s")
                
                # V√©rifier les types de nodes
                node_types = [n.type for n in nodes]
                print(f"   üìã Types: {set(node_types)}")
                
                # V√©rifier les textures
                tex_nodes = [n for n in nodes if n.type == 'TEX_IMAGE']
                if tex_nodes:
                    print(f"   üñºÔ∏è {len(tex_nodes)} texture(s):")
                    for tex_node in tex_nodes:
                        if tex_node.image:
                            print(f"      - {tex_node.image.name} ({tex_node.image.filepath})")
                        else:
                            print(f"      - Node texture sans image")
                else:
                    print("   ‚ùå Aucune texture trouv√©e")
            else:
                print("   ‚ùå Pas de node tree")
        else:
            print("   ‚ùå Aucun mat√©riau assign√©")
    
    print("\n" + "=" * 60)
    print("üéØ R√âSUM√â DU DIAGNOSTIC")
    print("=" * 60)

# Ex√©cuter le diagnostic
if __name__ == "__main__":
    diagnostic_textures_buildings()
