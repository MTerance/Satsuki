# DIAGNOSTIC ERREURS TOKYO v1.3.0
# Script √† ex√©cuter DANS Blender pour diagnostiquer les erreurs

import bpy
import sys
import os
import traceback

def diagnostic_tokyo_errors():
    """Diagnostic complet des erreurs Tokyo City Generator"""
    
    print("üîç DIAGNOSTIC ERREURS TOKYO CITY GENERATOR")
    print("=" * 50)
    
    # 1. V√©rifier si l'addon est install√©
    print("üì¶ 1. V√âRIFICATION INSTALLATION")
    print("-" * 30)
    
    addon_name = "tokyo_city_generator"
    if addon_name in bpy.context.preferences.addons:
        addon = bpy.context.preferences.addons[addon_name]
        print(f"‚úÖ Addon trouv√©: {addon_name}")
        
        # R√©cup√©rer les infos de l'addon
        try:
            module = addon.module
            if hasattr(module, 'bl_info'):
                info = module.bl_info
                print(f"üìã Nom: {info.get('name', 'Non d√©fini')}")
                print(f"üî¢ Version: {info.get('version', 'Non d√©finie')}")
                print(f"üë§ Auteur: {info.get('author', 'Non d√©fini')}")
                print(f"üìù Description: {info.get('description', 'Non d√©finie')}")
            else:
                print("‚ö†Ô∏è bl_info non trouv√©")
        except Exception as e:
            print(f"‚ùå Erreur lecture addon: {e}")
    else:
        print(f"‚ùå Addon non trouv√©: {addon_name}")
        print("üîß L'addon n'est peut-√™tre pas activ√©")
        return False
    
    # 2. V√©rifier les modules import√©s
    print(f"\nüß© 2. V√âRIFICATION MODULES")
    print("-" * 30)
    
    try:
        # Tester l'import du module principal
        import tokyo_city_generator
        print("‚úÖ Module principal import√©")
        
        # V√©rifier les sous-modules
        modules_to_check = [
            'texture_system',
            '__init__'
        ]
        
        for module_name in modules_to_check:
            try:
                if hasattr(tokyo_city_generator, module_name.replace('__init__', '')):
                    print(f"‚úÖ Module {module_name} disponible")
                else:
                    print(f"‚ö†Ô∏è Module {module_name} non trouv√©")
            except Exception as e:
                print(f"‚ùå Erreur module {module_name}: {e}")
                
    except ImportError as e:
        print(f"‚ùå Impossible d'importer tokyo_city_generator: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur inattendue lors de l'import: {e}")
        return False
    
    # 3. V√©rifier les op√©rateurs
    print(f"\n‚öôÔ∏è 3. V√âRIFICATION OP√âRATEURS")
    print("-" * 30)
    
    operators_to_check = [
        'mesh.tokyo_city_generator',
        'mesh.tokyo_setup_textures'
    ]
    
    for op_name in operators_to_check:
        if hasattr(bpy.ops, op_name.split('.')[0]):
            category = getattr(bpy.ops, op_name.split('.')[0])
            if hasattr(category, op_name.split('.')[1]):
                print(f"‚úÖ Op√©rateur {op_name} disponible")
            else:
                print(f"‚ùå Op√©rateur {op_name} manquant")
        else:
            print(f"‚ùå Cat√©gorie {op_name.split('.')[0]} manquante")
    
    # 4. V√©rifier les propri√©t√©s
    print(f"\nüéõÔ∏è 4. V√âRIFICATION PROPRI√âT√âS")
    print("-" * 30)
    
    scene = bpy.context.scene
    properties_to_check = [
        'tokyo_grid_size',
        'tokyo_block_size',
        'tokyo_use_advanced_textures',
        'tokyo_texture_base_path'
    ]
    
    for prop_name in properties_to_check:
        if hasattr(scene, prop_name):
            prop_value = getattr(scene, prop_name)
            print(f"‚úÖ Propri√©t√© {prop_name}: {prop_value}")
        else:
            print(f"‚ùå Propri√©t√© {prop_name} manquante")
    
    # 5. V√©rifier l'interface utilisateur
    print(f"\nüñ•Ô∏è 5. V√âRIFICATION INTERFACE")
    print("-" * 30)
    
    try:
        # Chercher le panneau Tokyo
        for area in bpy.context.screen.areas:
            if area.type == 'VIEW_3D':
                for space in area.spaces:
                    if space.type == 'VIEW_3D':
                        print("‚úÖ Vue 3D trouv√©e")
                        break
        
        # V√©rifier si les panneaux sont enregistr√©s
        panels_to_check = [
            'VIEW3D_PT_tokyo_city_generator'
        ]
        
        for panel_name in panels_to_check:
            try:
                # Essayer de trouver le panneau dans les classes enregistr√©es
                found = False
                for cls in bpy.types.__dict__.values():
                    if hasattr(cls, '__name__') and cls.__name__ == panel_name:
                        print(f"‚úÖ Panneau {panel_name} enregistr√©")
                        found = True
                        break
                
                if not found:
                    print(f"‚ùå Panneau {panel_name} non enregistr√©")
                    
            except Exception as e:
                print(f"‚ùå Erreur v√©rification panneau {panel_name}: {e}")
                
    except Exception as e:
        print(f"‚ùå Erreur v√©rification interface: {e}")
    
    # 6. Test de g√©n√©ration basique
    print(f"\nüß™ 6. TEST G√âN√âRATION BASIQUE")
    print("-" * 30)
    
    try:
        # Sauvegarder la s√©lection actuelle
        original_selection = bpy.context.selected_objects.copy()
        
        # Nettoyer la sc√®ne pour le test
        bpy.ops.object.select_all(action='SELECT')
        bpy.ops.object.delete(use_global=False)
        
        # Test de g√©n√©ration minimale
        bpy.context.scene.tokyo_grid_size = 2
        bpy.context.scene.tokyo_block_size = 20.0
        
        # Essayer de lancer la g√©n√©ration
        result = bpy.ops.mesh.tokyo_city_generator()
        
        if result == {'FINISHED'}:
            print("‚úÖ Test de g√©n√©ration r√©ussi")
            
            # Compter les objets cr√©√©s
            objects_created = len(bpy.context.scene.objects)
            print(f"üìä {objects_created} objets cr√©√©s")
            
        else:
            print(f"‚ùå Test de g√©n√©ration √©chou√©: {result}")
            
    except Exception as e:
        print(f"‚ùå Erreur test g√©n√©ration: {e}")
        traceback.print_exc()
    
    # 7. V√©rifier les chemins de textures
    print(f"\nüé® 7. V√âRIFICATION TEXTURES")
    print("-" * 30)
    
    try:
        if hasattr(bpy.context.scene, 'tokyo_texture_base_path'):
            texture_path = bpy.context.scene.tokyo_texture_base_path
            print(f"üìÅ Chemin textures: {texture_path}")
            
            if os.path.exists(texture_path):
                print("‚úÖ Dossier textures existe")
                
                # Compter les sous-dossiers
                subdirs = [d for d in os.listdir(texture_path) 
                          if os.path.isdir(os.path.join(texture_path, d))]
                print(f"üìä {len(subdirs)} sous-dossiers trouv√©s")
                
                for subdir in subdirs[:5]:  # Afficher les 5 premiers
                    print(f"  üìÇ {subdir}")
                    
            else:
                print("‚ùå Dossier textures n'existe pas")
        else:
            print("‚ùå Propri√©t√© chemin textures manquante")
            
    except Exception as e:
        print(f"‚ùå Erreur v√©rification textures: {e}")
    
    print(f"\n‚úÖ DIAGNOSTIC TERMIN√â")
    print("üîß Si des erreurs sont trouv√©es, v√©rifiez:")
    print("   - L'addon est activ√© dans les pr√©f√©rences")
    print("   - Blender a √©t√© red√©marr√© apr√®s installation")
    print("   - Aucun conflit avec d'autres addons")
    print("   - Le dossier de textures existe")

def run_diagnostic():
    """Lance le diagnostic"""
    try:
        diagnostic_tokyo_errors()
    except Exception as e:
        print(f"‚ùå ERREUR CRITIQUE DIAGNOSTIC: {e}")
        traceback.print_exc()

# Ex√©cuter le diagnostic si lanc√© directement
if __name__ == "__main__":
    run_diagnostic()

# Instructions pour utilisation dans Blender
"""
UTILISATION DANS BLENDER:
1. Ouvrez Blender
2. Allez dans Scripting workspace
3. Copiez ce script dans l'√©diteur de texte
4. Cliquez sur "Run Script"
5. Regardez la console pour les r√©sultats

OU

1. Ouvrez la console Python dans Blender (Window > Toggle System Console)
2. Copiez et collez ce script
3. Appuyez sur Entr√©e
"""
