# DIAGNOSTIC TEXTURES TOKYO - Pourquoi les textures ne s'appliquent pas ?

import bpy
import os

def diagnostic_textures_tokyo():
    """Diagnostic complet du syst√®me de textures Tokyo"""
    
    print("üîç DIAGNOSTIC SYST√àME TEXTURES TOKYO")
    print("=" * 50)
    
    # Test 1: V√©rifier l'addon est activ√©
    print("\n1Ô∏è‚É£ ADDON TOKYO:")
    addon_modules = [mod for mod in bpy.context.preferences.addons.keys() if 'tokyo' in mod.lower()]
    if addon_modules:
        for mod in addon_modules:
            print(f"  ‚úÖ Addon trouv√©: {mod}")
    else:
        print("  ‚ùå Aucun addon Tokyo trouv√©!")
        return
    
    # Test 2: V√©rifier les propri√©t√©s de sc√®ne
    print("\n2Ô∏è‚É£ PROPRI√âT√âS DE SC√àNE:")
    scene = bpy.context.scene
    
    # V√©rifier tokyo_use_advanced_textures
    if hasattr(scene, 'tokyo_use_advanced_textures'):
        use_advanced = scene.tokyo_use_advanced_textures
        print(f"  ‚úÖ tokyo_use_advanced_textures: {use_advanced}")
    else:
        print("  ‚ùå Propri√©t√© tokyo_use_advanced_textures manquante!")
        use_advanced = False
    
    # V√©rifier tokyo_texture_base_path
    if hasattr(scene, 'tokyo_texture_base_path'):
        texture_path = scene.tokyo_texture_base_path
        print(f"  ‚úÖ tokyo_texture_base_path: {texture_path}")
    else:
        print("  ‚ùå Propri√©t√© tokyo_texture_base_path manquante!")
        texture_path = None
    
    # Test 3: V√©rifier le module texture_system
    print("\n3Ô∏è‚É£ MODULE TEXTURE_SYSTEM:")
    try:
        # Essayer d'importer le module
        import sys
        for mod_name in sys.modules:
            if 'texture_system' in mod_name:
                print(f"  ‚úÖ Module trouv√©: {mod_name}")
        
        # Tester l'import direct
        exec("from . import texture_system")
        print("  ‚úÖ Import texture_system r√©ussi")
    except Exception as e:
        print(f"  ‚ùå Erreur import texture_system: {e}")
    
    # Test 4: V√©rifier les dossiers de textures
    print("\n4Ô∏è‚É£ DOSSIERS TEXTURES:")
    if texture_path and os.path.exists(texture_path):
        print(f"  ‚úÖ Dossier base existe: {texture_path}")
        
        # Lister les sous-dossiers
        try:
            subdirs = [d for d in os.listdir(texture_path) if os.path.isdir(os.path.join(texture_path, d))]
            if subdirs:
                print(f"  üìÅ Sous-dossiers trouv√©s: {len(subdirs)}")
                for subdir in subdirs[:5]:  # Limiter √† 5
                    print(f"    - {subdir}")
                if len(subdirs) > 5:
                    print(f"    ... et {len(subdirs) - 5} autres")
            else:
                print("  ‚ö†Ô∏è Aucun sous-dossier trouv√©")
        except Exception as e:
            print(f"  ‚ùå Erreur lecture dossier: {e}")
    else:
        print(f"  ‚ùå Dossier base inexistant: {texture_path}")
    
    # Test 5: V√©rifier les mat√©riaux existants
    print("\n5Ô∏è‚É£ MAT√âRIAUX SC√àNE:")
    materials = [mat for mat in bpy.data.materials if 'tokyo' in mat.name.lower()]
    if materials:
        print(f"  ‚úÖ Mat√©riaux Tokyo trouv√©s: {len(materials)}")
        for mat in materials[:5]:
            print(f"    - {mat.name}")
            # V√©rifier si le mat√©riau a des textures
            if mat.node_tree:
                img_nodes = [node for node in mat.node_tree.nodes if node.type == 'TEX_IMAGE']
                if img_nodes:
                    print(f"      üì∑ Textures: {len(img_nodes)}")
                else:
                    print("      ‚ö†Ô∏è Pas de texture image")
            else:
                print("      ‚ö†Ô∏è Pas de node tree")
    else:
        print("  ‚ö†Ô∏è Aucun mat√©riau Tokyo trouv√©")
    
    # Test 6: V√©rifier les objets avec mat√©riaux
    print("\n6Ô∏è‚É£ OBJETS AVEC MAT√âRIAUX:")
    objects_with_materials = [obj for obj in bpy.context.scene.objects if obj.data and hasattr(obj.data, 'materials') and obj.data.materials]
    if objects_with_materials:
        print(f"  ‚úÖ Objets avec mat√©riaux: {len(objects_with_materials)}")
        for obj in objects_with_materials[:5]:
            mat_count = len([mat for mat in obj.data.materials if mat])
            print(f"    - {obj.name}: {mat_count} mat√©riaux")
    else:
        print("  ‚ö†Ô∏è Aucun objet avec mat√©riau trouv√©")
    
    # Test 7: Tester l'interface
    print("\n7Ô∏è‚É£ INTERFACE TOKYO:")
    try:
        # V√©rifier les panneaux
        panels = [cls for cls in bpy.types.Panel.__subclasses__() if 'TOKYO' in cls.__name__]
        if panels:
            print(f"  ‚úÖ Panneaux Tokyo: {len(panels)}")
            for panel in panels:
                print(f"    - {panel.__name__}")
        else:
            print("  ‚ùå Aucun panneau Tokyo trouv√©")
    except Exception as e:
        print(f"  ‚ùå Erreur v√©rification interface: {e}")
    
    # DIAGNOSTIC FINAL
    print("\n" + "=" * 50)
    print("üéØ R√âSUM√â DIAGNOSTIC:")
    
    if not use_advanced:
        print("‚ùå PROBL√àME PRINCIPAL: Advanced Textures d√©sactiv√©!")
        print("   ‚Üí Solution: Cocher 'Advanced Textures' dans l'interface Tokyo")
    elif not texture_path or not os.path.exists(texture_path):
        print("‚ùå PROBL√àME PRINCIPAL: Dossier textures inexistant!")
        print("   ‚Üí Solution: Configurer le chemin textures ou cr√©er les dossiers")
    elif not materials:
        print("‚ùå PROBL√àME PRINCIPAL: Aucun mat√©riau Tokyo cr√©√©!")
        print("   ‚Üí Solution: G√©n√©rer un district pour cr√©er les mat√©riaux")
    else:
        print("‚úÖ Syst√®me semble correctement configur√©")
        print("   ‚Üí V√©rifiez le mode d'affichage Blender (Material Preview/Rendered)")
    
    print("\nüîß ACTIONS RECOMMAND√âES:")
    print("1. Activer 'Advanced Textures' dans l'onglet Tokyo")
    print("2. V√©rifier le chemin des textures")
    print("3. G√©n√©rer un nouveau district")
    print("4. Passer en mode Material Preview (Blender)")
    
    return {
        'advanced_textures': use_advanced,
        'texture_path_exists': texture_path and os.path.exists(texture_path) if texture_path else False,
        'materials_count': len(materials),
        'objects_count': len(objects_with_materials)
    }

# Ex√©cuter le diagnostic
if __name__ == "__main__":
    try:
        result = diagnostic_textures_tokyo()
        print(f"\nüìä R√©sultat: {result}")
    except Exception as e:
        print(f"‚ùå Erreur diagnostic: {e}")
        import traceback
        traceback.print_exc()
