# TEST SIMPLE TEXTURES - Cr√©er des textures de d√©mo et tester l'application

import bpy
import os
import bmesh
from mathutils import Vector

def test_textures_simple():
    """Test simple pour v√©rifier l'application des textures"""
    
    print("üß™ TEST SIMPLE TEXTURES TOKYO")
    print("=" * 40)
    
    # Nettoyer la sc√®ne
    bpy.ops.object.select_all(action='SELECT')
    bpy.ops.object.delete(use_global=False)
    
    # Cr√©er un cube test
    bpy.ops.mesh.primitive_cube_add(location=(0, 0, 1))
    cube = bpy.context.object
    cube.name = "TestCube_Tokyo"
    
    print("‚úÖ Cube de test cr√©√©")
    
    # Test 1: Mat√©riau simple avec couleur
    print("\n1Ô∏è‚É£ Test mat√©riau color√©...")
    mat_colored = bpy.data.materials.new(name="Tokyo_Test_Colored")
    mat_colored.use_nodes = True
    nodes = mat_colored.node_tree.nodes
    nodes.clear()
    
    # N≈ìuds de base
    output = nodes.new(type='ShaderNodeOutputMaterial')
    bsdf = nodes.new(type='ShaderNodeBsdfPrincipled')
    
    # Couleur bleue pour test
    bsdf.inputs['Base Color'].default_value = (0.2, 0.5, 1.0, 1.0)  # Bleu
    bsdf.inputs['Metallic'].default_value = 0.0
    bsdf.inputs['Roughness'].default_value = 0.5
    
    # Connexion
    mat_colored.node_tree.links.new(bsdf.outputs['BSDF'], output.inputs['Surface'])
    
    # Appliquer au cube
    cube.data.materials.append(mat_colored)
    print("  ‚úÖ Mat√©riau color√© appliqu√©")
    
    # Test 2: Cr√©er une texture proc√©durale simple
    print("\n2Ô∏è‚É£ Test texture proc√©durale...")
    
    # Cr√©er un second cube
    bpy.ops.mesh.primitive_cube_add(location=(3, 0, 1))
    cube2 = bpy.context.object
    cube2.name = "TestCube_Procedural"
    
    mat_proc = bpy.data.materials.new(name="Tokyo_Test_Procedural")
    mat_proc.use_nodes = True
    nodes = mat_proc.node_tree.nodes
    nodes.clear()
    
    # N≈ìuds
    output = nodes.new(type='ShaderNodeOutputMaterial')
    bsdf = nodes.new(type='ShaderNodeBsdfPrincipled')
    
    # Texture de bruit
    noise = nodes.new(type='ShaderNodeTexNoise')
    noise.inputs['Scale'].default_value = 5.0
    noise.inputs['Detail'].default_value = 2.0
    noise.inputs['Roughness'].default_value = 0.5
    
    # ColorRamp pour cr√©er des bandes
    colorramp = nodes.new(type='ShaderNodeValToRGB')
    colorramp.color_ramp.elements[0].color = (0.8, 0.4, 0.2, 1.0)  # Orange
    colorramp.color_ramp.elements[1].color = (0.2, 0.2, 0.2, 1.0)  # Gris fonc√©
    
    # Connexions
    mat_proc.node_tree.links.new(noise.outputs['Fac'], colorramp.inputs['Fac'])
    mat_proc.node_tree.links.new(colorramp.outputs['Color'], bsdf.inputs['Base Color'])
    mat_proc.node_tree.links.new(bsdf.outputs['BSDF'], output.inputs['Surface'])
    
    cube2.data.materials.append(mat_proc)
    print("  ‚úÖ Texture proc√©durale appliqu√©e")
    
    # Test 3: Tester avec le syst√®me Tokyo si disponible
    print("\n3Ô∏è‚É£ Test syst√®me Tokyo...")
    
    try:
        # V√©rifier si le syst√®me Tokyo est disponible
        scene = bpy.context.scene
        
        # Activer les textures avanc√©es si la propri√©t√© existe
        if hasattr(scene, 'tokyo_use_advanced_textures'):
            scene.tokyo_use_advanced_textures = True
            print("  ‚úÖ Advanced Textures activ√©")
        else:
            print("  ‚ö†Ô∏è Propri√©t√© Advanced Textures non trouv√©e")
        
        # Cr√©er un b√¢timent avec le syst√®me Tokyo
        bpy.ops.mesh.primitive_cube_add(location=(6, 0, 1))
        cube3 = bpy.context.object
        cube3.name = "TestBuilding_Tokyo"
        cube3.scale = (2, 2, 4)  # Faire un b√¢timent
        
        # Essayer d'appliquer le mat√©riau Tokyo
        try:
            # Simuler les param√®tres d'un b√¢timent
            zone_type = "business"
            height = 8.0
            width_x = 4.0
            width_y = 4.0
            
            # Test du syst√®me de textures
            exec("""
# Essayer d'importer et utiliser le syst√®me
try:
    from . import texture_system
    tokyo_system = texture_system.TokyoTextureSystem()
    material = tokyo_system.create_advanced_building_material(
        zone_type, height, width_x, width_y, "TestBuilding", 
        r"C:\\Users\\sshom\\Documents\\assets\\Tools\\tokyo_textures"
    )
    cube3.data.materials.append(material)
    print("  ‚úÖ Mat√©riau Tokyo appliqu√©")
except Exception as e:
    print(f"  ‚ùå Erreur syst√®me Tokyo: {e}")
    # Fallback vers mat√©riau simple
    mat_fallback = bpy.data.materials.new(name="Tokyo_Fallback")
    mat_fallback.use_nodes = True
    nodes = mat_fallback.node_tree.nodes
    nodes.clear()
    
    output = nodes.new(type='ShaderNodeOutputMaterial')
    bsdf = nodes.new(type='ShaderNodeBsdfPrincipled')
    bsdf.inputs['Base Color'].default_value = (0.7, 0.7, 0.7, 1.0)
    bsdf.inputs['Metallic'].default_value = 0.3
    bsdf.inputs['Roughness'].default_value = 0.4
    
    mat_fallback.node_tree.links.new(bsdf.outputs['BSDF'], output.inputs['Surface'])
    cube3.data.materials.append(mat_fallback)
    print("  ‚úÖ Mat√©riau fallback appliqu√©")
""")
            
        except Exception as e:
            print(f"  ‚ùå Erreur test Tokyo: {e}")
            
    except Exception as e:
        print(f"  ‚ùå Erreur g√©n√©rale: {e}")
    
    # Configurer la vue pour voir les mat√©riaux
    print("\n4Ô∏è‚É£ Configuration vue...")
    
    # Changer le mode d'affichage en Material Preview
    for area in bpy.context.screen.areas:
        if area.type == 'VIEW_3D':
            for space in area.spaces:
                if space.type == 'VIEW_3D':
                    space.shading.type = 'MATERIAL'
                    print("  ‚úÖ Mode Material Preview activ√©")
                    break
    
    # Positionner la cam√©ra pour voir les cubes
    if bpy.context.scene.camera:
        cam = bpy.context.scene.camera
        cam.location = (10, -10, 8)
        cam.rotation_euler = (1.1, 0, 0.785)
    
    print("\n‚úÖ TEST TERMIN√â!")
    print("üéØ R√âSULTATS:")
    print("  - 3 cubes cr√©√©s avec diff√©rents mat√©riaux")
    print("  - Mode Material Preview activ√©")
    print("  - V√©rifiez visuellement dans Blender")
    
    print("\nüí° SI LES TEXTURES NE SONT PAS VISIBLES:")
    print("  1. V√©rifiez le mode d'affichage (Material Preview/Rendered)")
    print("  2. V√©rifiez que les objets ont bien des mat√©riaux")
    print("  3. Activez 'Advanced Textures' dans l'onglet Tokyo")
    print("  4. Configurez le chemin des textures")

# Ex√©cuter le test
if __name__ == "__main__":
    test_textures_simple()
