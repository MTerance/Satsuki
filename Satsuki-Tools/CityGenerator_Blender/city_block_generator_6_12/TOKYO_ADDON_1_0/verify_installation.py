# V√âRIFICATION INSTALLATION TOKYO v1.3.0
# Script pour v√©rifier que l'addon est correctement install√© dans Blender

import os

def verify_tokyo_installation():
    """V√©rifie l'installation de Tokyo City Generator v1.3.0"""
    
    print("üîç V√âRIFICATION INSTALLATION TOKYO v1.3.0")
    print("=" * 50)
    
    # Chemin d'installation Blender
    blender_addon_path = r"C:\Users\sshom\AppData\Roaming\Blender Foundation\Blender\4.0\scripts\addons\tokyo_city_generator"
    
    # V√©rifier le dossier principal
    if os.path.exists(blender_addon_path):
        print(f"‚úÖ Dossier addon trouv√©: {blender_addon_path}")
    else:
        print(f"‚ùå Dossier addon introuvable: {blender_addon_path}")
        return False
    
    # Fichiers essentiels √† v√©rifier
    essential_files = {
        "__init__.py": "Fichier principal de l'addon",
        "texture_system.py": "Syst√®me de textures intelligent",
        "setup_textures.py": "Configuration des dossiers",
        "test_texture_system.py": "Tests du syst√®me",
        "TEXTURE_SYSTEM_GUIDE.md": "Guide d'utilisation",
        "VERSION.txt": "Informations de version",
        "INSTALLATION_RAPIDE.md": "Guide d'installation",
        "CHANGELOG.md": "Liste des changements"
    }
    
    print("\nüìã V√©rification des fichiers:")
    missing_files = 0
    total_size = 0
    
    for filename, description in essential_files.items():
        file_path = os.path.join(blender_addon_path, filename)
        if os.path.exists(file_path):
            file_size = os.path.getsize(file_path)
            total_size += file_size
            print(f"  ‚úÖ {filename} ({file_size:,} bytes) - {description}")
        else:
            print(f"  ‚ùå {filename} MANQUANT - {description}")
            missing_files += 1
    
    # V√©rifier le contenu du fichier principal
    init_file = os.path.join(blender_addon_path, "__init__.py")
    if os.path.exists(init_file):
        print("\nüîç V√©rification du fichier principal:")
        with open(init_file, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # V√©rifier la version
        if '"version": (1, 3, 0)' in content:
            print("  ‚úÖ Version 1.3.0 confirm√©e")
        else:
            print("  ‚ùå Version incorrecte dans __init__.py")
            missing_files += 1
            
        # V√©rifier le nom
        if "Tokyo City Generator 1.3.0 TEXTURE SYSTEM" in content:
            print("  ‚úÖ Nom d'addon correct")
        else:
            print("  ‚ùå Nom d'addon incorrect")
            missing_files += 1
            
        # V√©rifier l'import du syst√®me de textures
        if "from .texture_system import tokyo_texture_system" in content:
            print("  ‚úÖ Import du syst√®me de textures d√©tect√©")
        else:
            print("  ‚ö†Ô∏è Import du syst√®me de textures non trouv√©")
            
        # V√©rifier la nouvelle propri√©t√©
        if "tokyo_use_advanced_textures" in content:
            print("  ‚úÖ Propri√©t√© 'Advanced Textures' d√©tect√©e")
        else:
            print("  ‚ùå Propri√©t√© 'Advanced Textures' manquante")
            missing_files += 1
    
    # V√©rifier la structure des dossiers de textures
    texture_base = "C:/Users/sshom/Documents/Assets/Textures/Tokyo_Buildings/"
    print(f"\nüóÇÔ∏è V√©rification structure textures: {texture_base}")
    
    if os.path.exists(texture_base):
        print("  ‚úÖ Dossier de base des textures trouv√©")
        
        # Compter les sous-dossiers
        categories = ["skyscrapers", "commercial", "midrise", "residential", "lowrise"]
        total_folders = 0
        
        for category in categories:
            category_path = os.path.join(texture_base, category)
            if os.path.exists(category_path):
                subfolders = [d for d in os.listdir(category_path) 
                            if os.path.isdir(os.path.join(category_path, d))]
                total_folders += len(subfolders)
                print(f"    ‚úÖ {category}: {len(subfolders)} sous-dossiers")
            else:
                print(f"    ‚ùå {category}: dossier manquant")
        
        print(f"  üìä Total: {total_folders}/20 dossiers de textures")
        
        # V√©rifier le guide principal
        guide_path = os.path.join(texture_base, "TOKYO_TEXTURE_GUIDE.md")
        if os.path.exists(guide_path):
            print("  ‚úÖ Guide des textures pr√©sent")
        else:
            print("  ‚ö†Ô∏è Guide des textures manquant")
            
    else:
        print("  ‚ö†Ô∏è Dossier de textures non cr√©√© (ex√©cuter setup_textures.py)")
    
    # R√©sum√© final
    print("\n" + "=" * 50)
    print("üìä R√âSUM√â DE LA V√âRIFICATION")
    print("=" * 50)
    
    if missing_files == 0:
        print("üéâ INSTALLATION PARFAITE!")
        print("‚úÖ Tous les fichiers sont pr√©sents")
        print(f"üíæ Taille totale: {total_size:,} bytes")
        print("üöÄ L'addon est pr√™t √† √™tre utilis√© dans Blender")
        
        print("\nüéÆ PROCHAINES √âTAPES:")
        print("1. Red√©marrer Blender")
        print("2. Aller dans Edit > Preferences > Add-ons")
        print("3. Chercher 'Tokyo City Generator 1.3.0'")
        print("4. Activer l'addon")
        print("5. Aller dans l'onglet 'Tokyo' (sidebar N)")
        print("6. Cocher 'Advanced Textures'")
        print("7. G√©n√©rer votre ville avec textures intelligentes!")
        
        return True
    else:
        print(f"‚ö†Ô∏è PROBL√àMES D√âTECT√âS: {missing_files}")
        print("üîß Veuillez relancer le d√©ploiement")
        return False

if __name__ == "__main__":
    try:
        success = verify_tokyo_installation()
        if success:
            print("\n‚ú® V√©rification termin√©e avec succ√®s!")
        else:
            print("\n‚ùå V√©rification √©chou√©e - Probl√®mes d√©tect√©s")
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")
        import traceback
        traceback.print_exc()
