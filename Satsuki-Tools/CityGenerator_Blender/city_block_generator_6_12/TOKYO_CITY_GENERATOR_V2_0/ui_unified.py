"""
Interface utilisateur unifi√©e pour Tokyo City Generator v2.0
"""

import bpy
from bpy.types import Panel, Operator
from bpy.props import BoolProperty

class TOKYO_V2_PT_algorithm_panel(Panel):
    """Panneau de s√©lection d'algorithme"""
    bl_label = "Algorithm Selection"
    bl_idname = "TOKYO_V2_PT_algorithm_panel"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'UI'
    bl_category = 'Tokyo v2.0'
    bl_parent_id = "TOKYO_V2_PT_main_panel"
    
    def draw(self, context):
        layout = self.layout
        props = context.scene.tokyo_v2
        
        # Affichage des algorithmes avec ic√¥nes
        box = layout.box()
        box.label(text="üéØ Select Generation Algorithm", icon='MODIFIER')
        
        # Tokyo Districts
        row = box.row(align=True)
        if props.generation_mode == 'TOKYO':
            row.alert = True
        op = row.operator("tokyo_v2.set_mode", text="üóæ Tokyo Districts")
        op.mode = 'TOKYO'
        
        # Organic Cities
        row = box.row(align=True)
        if props.generation_mode == 'ORGANIC':
            row.alert = True
        op = row.operator("tokyo_v2.set_mode", text="üåø Organic Cities")
        op.mode = 'ORGANIC'
        
        # Grid Cities
        row = box.row(align=True)
        if props.generation_mode == 'GRID':
            row.alert = True
        op = row.operator("tokyo_v2.set_mode", text="üìê Grid Cities")
        op.mode = 'GRID'
        
        # Description de l'algorithme s√©lectionn√©
        box.separator()
        descriptions = {
            'TOKYO': "Realistic Tokyo-style mixed districts\nwith varied building heights and zones",
            'ORGANIC': "Natural, curved city layouts\nwith non-rectangular patterns",
            'GRID': "Classic rectangular grid system\nwith uniform block distribution"
        }
        
        desc_box = box.box()
        desc_box.scale_y = 0.8
        for line in descriptions[props.generation_mode].split('\n'):
            desc_box.label(text=line, icon='INFO')

class TOKYO_V2_PT_parameters_panel(Panel):
    """Panneau des param√®tres de g√©n√©ration"""
    bl_label = "Generation Parameters"
    bl_idname = "TOKYO_V2_PT_parameters_panel"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'UI'
    bl_category = 'Tokyo v2.0'
    bl_parent_id = "TOKYO_V2_PT_main_panel"
    
    def draw(self, context):
        layout = self.layout
        props = context.scene.tokyo_v2
        
        # Param√®tres communs
        box = layout.box()
        box.label(text="üèóÔ∏è Basic Parameters", icon='SETTINGS')
        
        col = box.column(align=True)
        col.prop(props, "city_size", slider=True)
        col.prop(props, "building_density", slider=True)
        col.prop(props, "building_variety", slider=True)
        
        # Param√®tres sp√©cialis√©s selon l'algorithme
        if props.generation_mode == 'TOKYO':
            self.draw_tokyo_params(layout, props)
        elif props.generation_mode == 'ORGANIC':
            self.draw_organic_params(layout, props)
        elif props.generation_mode == 'GRID':
            self.draw_grid_params(layout, props)
    
    def draw_tokyo_params(self, layout, props):
        """Param√®tres sp√©cifiques √† Tokyo"""
        box = layout.box()
        box.label(text="üóæ Tokyo District Settings", icon='WORLD')
        box.prop(props, "tokyo_district_type", expand=False)
        
        # Info sur le type de district
        district_info = {
            'MIXED': "üèòÔ∏è Varied heights and building types",
            'RESIDENTIAL': "üè† Houses and low-rise apartments", 
            'COMMERCIAL': "üè™ Shopping centers and retail",
            'BUSINESS': "üè¢ Office buildings and skyscrapers"
        }
        
        info_box = box.box()
        info_box.scale_y = 0.7
        info_box.label(text=district_info.get(props.tokyo_district_type, ""), icon='INFO')
    
    def draw_organic_params(self, layout, props):
        """Param√®tres sp√©cifiques √† Organic"""
        box = layout.box()
        box.label(text="üåø Organic Settings", icon='FORCE_CURVE')
        box.prop(props, "organic_factor", slider=True)
        
        # Indicateur visuel du facteur organique
        info_box = box.box()
        info_box.scale_y = 0.7
        if props.organic_factor < 0.3:
            info_box.label(text="üìê Almost rectangular layout", icon='INFO')
        elif props.organic_factor < 0.7:
            info_box.label(text="üåÄ Moderately curved paths", icon='INFO')
        else:
            info_box.label(text="üåä Highly organic curves", icon='INFO')
    
    def draw_grid_params(self, layout, props):
        """Param√®tres sp√©cifiques √† Grid"""
        box = layout.box()
        box.label(text="üìê Grid Settings", icon='GRID')
        
        info_box = box.box()
        info_box.scale_y = 0.7
        info_box.label(text="üìè Perfect rectangular blocks", icon='INFO')
        info_box.label(text="üõ£Ô∏è Regular street network", icon='INFO')

class TOKYO_V2_PT_textures_panel(Panel):
    """Panneau du syst√®me de textures"""
    bl_label = "Advanced Textures v2.0"
    bl_idname = "TOKYO_V2_PT_textures_panel"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'UI'
    bl_category = 'Tokyo v2.0'
    bl_parent_id = "TOKYO_V2_PT_main_panel"
    
    def draw(self, context):
        layout = self.layout
        props = context.scene.tokyo_v2
        
        # Syst√®me de textures principal
        box = layout.box()
        box.label(text="üé® Multi-Floor Texture System", icon='MATERIAL')
        
        row = box.row(align=True)
        row.prop(props, "use_advanced_textures", text="Enable Advanced Textures")
        
        if props.use_advanced_textures:
            box.separator()
            box.prop(props, "texture_base_path")
            
            # Status du syst√®me de textures
            status_box = box.box()
            status_box.scale_y = 0.8
            
            # V√©rifier si le chemin existe
            import os
            if os.path.exists(props.texture_base_path):
                status_box.label(text="‚úÖ Texture path found", icon='CHECKMARK')
            else:
                status_box.label(text="‚ö†Ô∏è Texture path not found", icon='ERROR')
                status_box.label(text="Will use procedural materials", icon='INFO')
            
            # Info sur le syst√®me multi-√©tages
            info_box = box.box()
            info_box.scale_y = 0.7
            info_box.label(text="üìè 4 floors per texture file", icon='INFO')
            info_box.label(text="üîÑ Auto-repeat based on height", icon='INFO')
            info_box.label(text="üéØ Category-based selection", icon='INFO')
        else:
            # Mode proc√©dural
            info_box = box.box()
            info_box.scale_y = 0.8
            info_box.label(text="üé® Using procedural materials", icon='INFO')
            info_box.label(text="üöÄ Faster generation", icon='INFO')

class TOKYO_V2_PT_advanced_panel(Panel):
    """Panneau des options avanc√©es"""
    bl_label = "Advanced Options"
    bl_idname = "TOKYO_V2_PT_advanced_panel"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'UI'
    bl_category = 'Tokyo v2.0'
    bl_parent_id = "TOKYO_V2_PT_main_panel"
    bl_options = {'DEFAULT_CLOSED'}
    
    def draw(self, context):
        layout = self.layout
        props = context.scene.tokyo_v2
        
        # Infrastructure
        box = layout.box()
        box.label(text="üõ£Ô∏è Infrastructure", icon='MOD_BUILD')
        
        col = box.column(align=True)
        col.prop(props, "include_roads")
        col.prop(props, "include_props")
        
        # Random seed
        box = layout.box()
        box.label(text="üé≤ Randomization", icon='FORCE_TURBULENCE')
        box.prop(props, "seed")
        
        seed_box = box.box()
        seed_box.scale_y = 0.7
        if props.seed == 0:
            seed_box.label(text="üé≤ Random seed each time", icon='INFO')
        else:
            seed_box.label(text=f"üîí Fixed seed: {props.seed}", icon='INFO')

class TOKYO_V2_PT_generation_panel(Panel):
    """Panneau de g√©n√©ration"""
    bl_label = "Generate City"
    bl_idname = "TOKYO_V2_PT_generation_panel"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'UI'
    bl_category = 'Tokyo v2.0'
    bl_parent_id = "TOKYO_V2_PT_main_panel"
    
    def draw(self, context):
        layout = self.layout
        props = context.scene.tokyo_v2
        
        # R√©sum√© de g√©n√©ration
        box = layout.box()
        box.label(text="üìä Generation Preview", icon='PREVIEW_RANGE')
        
        # Calculs approximatifs
        estimated_buildings = int(props.city_size * props.city_size * props.building_density * 3)
        estimated_blocks = props.city_size * props.city_size
        
        info_col = box.column(align=True)
        info_col.scale_y = 0.8
        info_col.label(text=f"üèóÔ∏è ~{estimated_buildings} buildings")
        info_col.label(text=f"üèòÔ∏è {estimated_blocks} blocks")
        info_col.label(text=f"üéØ {props.generation_mode} algorithm")
        
        # Bouton principal de g√©n√©ration
        layout.separator()
        row = layout.row(align=True)
        row.scale_y = 2.5
        
        # Ic√¥ne selon l'algorithme
        icons = {
            'TOKYO': 'WORLD',
            'ORGANIC': 'FORCE_CURVE', 
            'GRID': 'GRID'
        }
        
        row.operator("tokyo_v2.generate_city", 
                    text=f"üèôÔ∏è Generate {props.generation_mode.title()} City", 
                    icon=icons.get(props.generation_mode, 'MESH_CUBE'))
        
        # Boutons utilitaires
        layout.separator()
        utils_row = layout.row(align=True)
        utils_row.operator("tokyo_v2.clear_scene", text="üóëÔ∏è Clear Scene", icon='TRASH')
        utils_row.operator("tokyo_v2.reload_system", text="üîÑ Reload", icon='FILE_REFRESH')

# ===================================================================
# OP√âRATEURS UTILITAIRES
# ===================================================================

class TOKYO_V2_OT_set_mode(Operator):
    """Change generation mode"""
    bl_idname = "tokyo_v2.set_mode"
    bl_label = "Set Generation Mode"
    
    mode: bpy.props.StringProperty()
    
    def execute(self, context):
        context.scene.tokyo_v2.generation_mode = self.mode
        self.report({'INFO'}, f"Mode changed to {self.mode}")
        return {'FINISHED'}

class TOKYO_V2_OT_clear_scene(Operator):
    """Clear all city objects from scene"""
    bl_idname = "tokyo_v2.clear_scene"
    bl_label = "Clear Scene"
    bl_options = {'REGISTER', 'UNDO'}
    
    def execute(self, context):
        # Pr√©fixes de tous les g√©n√©rateurs
        all_prefixes = [
            "TokyoBuilding_", "TokyoSidewalk_", "TokyoStreet_", "TokyoCrossing_",
            "OrganicBuilding_", "OrganicRoad_", "OrganicBlock_",
            "GridBuilding_", "GridStreet_", "GridBlock_",
            "CityBuilding_", "CityRoad_", "CityBlock_", "CityProp_"
        ]
        
        count = 0
        for obj in list(bpy.data.objects):
            if any(obj.name.startswith(prefix) for prefix in all_prefixes):
                bpy.data.objects.remove(obj, do_unlink=True)
                count += 1
        
        self.report({'INFO'}, f"Cleared {count} city objects from scene")
        return {'FINISHED'}

class TOKYO_V2_OT_reload_system(Operator):
    """Reload Tokyo City Generator v2.0 system"""
    bl_idname = "tokyo_v2.reload_system"
    bl_label = "Reload System"
    
    def execute(self, context):
        try:
            # Recharger les modules (n√©cessite restart de Blender en r√©alit√©)
            self.report({'INFO'}, "System reload requested. Restart Blender for full reload.")
            return {'FINISHED'}
        except Exception as e:
            self.report({'ERROR'}, f"Reload failed: {str(e)}")
            return {'CANCELLED'}

# ===================================================================
# ENREGISTREMENT
# ===================================================================

classes = [
    TOKYO_V2_PT_algorithm_panel,
    TOKYO_V2_PT_parameters_panel,
    TOKYO_V2_PT_textures_panel,
    TOKYO_V2_PT_advanced_panel,
    TOKYO_V2_PT_generation_panel,
    TOKYO_V2_OT_set_mode,
    TOKYO_V2_OT_clear_scene,
    TOKYO_V2_OT_reload_system,
]

def register():
    """Enregistrement de l'interface unifi√©e"""
    for cls in classes:
        bpy.utils.register_class(cls)
    print("üé® Interface unifi√©e v2.0 enregistr√©e")

def unregister():
    """D√©senregistrement de l'interface unifi√©e"""
    for cls in reversed(classes):
        bpy.utils.unregister_class(cls)
    print("üîÑ Interface unifi√©e v2.0 d√©senregistr√©e")