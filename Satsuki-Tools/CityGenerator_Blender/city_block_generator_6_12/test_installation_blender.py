# TEST INSTALLATION TOKYO SIMPLE V2.1 DANS BLENDER

# üéØ PROC√âDURE DE TEST COMPL√àTE

import os
import subprocess
import sys

def test_blender_installation():
    """Test complet de l'installation de Tokyo Simple v2.1 dans Blender"""
    
    print("üöÄ D√âBUT DU TEST D'INSTALLATION TOKYO SIMPLE V2.1")
    print("=" * 60)
    
    # √âtape 1: V√©rifier l'existence du ZIP
    zip_path = "tokyo_simple_v2_1.zip"
    
    if not os.path.exists(zip_path):
        print("‚ùå ERREUR: tokyo_simple_v2_1.zip non trouv√©!")
        return False
    
    print(f"‚úÖ ZIP trouv√©: {zip_path}")
    print(f"   Taille: {os.path.getsize(zip_path)} bytes")
    
    # √âtape 2: V√©rifier le contenu du ZIP
    try:
        import zipfile
        with zipfile.ZipFile(zip_path, 'r') as zip_ref:
            files = zip_ref.namelist()
            print(f"‚úÖ Contenu ZIP: {len(files)} fichier(s)")
            for file in files:
                print(f"   - {file}")
            
            # V√©rifier la structure attendue
            expected_files = ["TOKYO_SIMPLE_V2_1/__init__.py"]
            for expected in expected_files:
                if expected in files:
                    print(f"‚úÖ Structure correcte: {expected}")
                else:
                    print(f"‚ùå MANQUE: {expected}")
                    return False
    
    except Exception as e:
        print(f"‚ùå ERREUR lors de la lecture du ZIP: {e}")
        return False
    
    # √âtape 3: Instructions d'installation dans Blender
    print("\nüîß INSTRUCTIONS D'INSTALLATION DANS BLENDER:")
    print("-" * 50)
    print("1. Ouvrir Blender 4.0+")
    print("2. Edit ‚Üí Preferences ‚Üí Add-ons")
    print("3. Cliquer 'Install...'")
    print(f"4. S√©lectionner le fichier: {os.path.abspath(zip_path)}")
    print("5. Activer 'Tokyo City Generator v2.1 SIMPLE'")
    print("6. Fermer les Preferences")
    print("7. Vue 3D ‚Üí Sidebar (N) ‚Üí Onglet 'Tokyo'")
    
    # √âtape 4: Checklist de validation
    print("\n‚úÖ CHECKLIST DE VALIDATION:")
    print("-" * 40)
    print("‚ñ° L'addon appara√Æt dans la liste des Add-ons")
    print("‚ñ° L'addon s'active sans erreur")
    print("‚ñ° L'onglet 'Tokyo' appara√Æt dans la sidebar")
    print("‚ñ° Le panneau 'Tokyo City Generator' est visible")
    print("‚ñ° Les 4 param√®tres sont affich√©s:")
    print("  - City Size (3-10)")
    print("  - Building Style (Low/Mixed/High)")
    print("  - Density (slider 0.3-1.0)")
    print("  - Better Materials (checkbox)")
    print("‚ñ° Le bouton 'Generate Tokyo City' est visible")
    print("‚ñ° Le bouton 'Clear City' est visible")
    
    # √âtape 5: Test de g√©n√©ration
    print("\nüèôÔ∏è TEST DE G√âN√âRATION:")
    print("-" * 30)
    print("1. Param√®tres recommand√©s pour le premier test:")
    print("   - City Size: 5")
    print("   - Building Style: Mixed")
    print("   - Density: 70%")
    print("   - Better Materials: ON")
    print("2. Cliquer 'Generate Tokyo City'")
    print("3. V√©rifier:")
    print("   ‚ñ° G√©n√©ration sans erreur (< 5 secondes)")
    print("   ‚ñ° Routes grises visibles en grille")
    print("   ‚ñ° B√¢timents de hauteurs vari√©es")
    print("   ‚ñ° Pas de chevauchement routes/b√¢timents")
    print("   ‚ñ° Mat√©riaux color√©s diff√©rents")
    print("   ‚ñ° Message de succ√®s affich√©")
    
    # √âtape 6: Test de nettoyage
    print("\nüóëÔ∏è TEST DE NETTOYAGE:")
    print("-" * 25)
    print("1. Cliquer 'Clear City'")
    print("2. V√©rifier:")
    print("   ‚ñ° Tous les objets Tokyo disparaissent")
    print("   ‚ñ° Message de confirmation affich√©")
    print("   ‚ñ° Sc√®ne vide pr√™te pour nouvelle g√©n√©ration")
    
    print("\nüéØ R√âSULTATS ATTENDUS:")
    print("-" * 30)
    print("‚úÖ Interface simple et claire (4 param√®tres)")
    print("‚úÖ G√©n√©ration rapide et fiable")
    print("‚úÖ Ville avec routes + b√¢timents bien s√©par√©s")
    print("‚úÖ Vari√©t√© visuelle automatique")
    print("‚úÖ Contr√¥les fonctionnels")
    
    print("\n" + "=" * 60)
    print("üéâ PR√äT POUR LE TEST DANS BLENDER!")
    print(f"üìÅ Fichier √† installer: {os.path.abspath(zip_path)}")
    
    return True

if __name__ == "__main__":
    test_blender_installation()