# DIAGNOSTIC APPROFONDI - √Ä copier-coller dans la console Blender
# Ce script va identifier pourquoi les textures ne s'appliquent pas

import bpy
import os

def diagnostic_complet():
    print("=" * 80)
    print("üîç DIAGNOSTIC COMPLET TEXTURES TOKYO")
    print("=" * 80)
    
    # 1. V√©rifier l'addon
    print("\n1. V√âRIFICATION ADDON:")
    addon_found = False
    for addon in bpy.context.preferences.addons:
        if 'tokyo' in addon.module.lower():
            print(f"   ‚úÖ Addon: {addon.module}")
            addon_found = True
    
    if not addon_found:
        print("   ‚ùå Addon Tokyo non trouv√©")
        return
    
    # 2. V√©rifier les variables globales
    print("\n2. VARIABLES SYST√àME:")
    
    # Tenter d'acc√©der aux variables du syst√®me
    try:
        # Importer le module
        import sys
        modules = [name for name in sys.modules.keys() if 'tokyo' in name.lower()]
        print(f"   üì¶ Modules Tokyo charg√©s: {modules}")
        
        # V√©rifier TEXTURE_SYSTEM_AVAILABLE
        if 'tokyo_city_generator' in sys.modules:
            module = sys.modules['tokyo_city_generator']
            if hasattr(module, 'TEXTURE_SYSTEM_AVAILABLE'):
                available = module.TEXTURE_SYSTEM_AVAILABLE
                print(f"   üîß TEXTURE_SYSTEM_AVAILABLE: {available}")
                
                if hasattr(module, 'tokyo_texture_system'):
                    system = module.tokyo_texture_system
                    print(f"   üé® tokyo_texture_system: {system}")
                else:
                    print("   ‚ùå tokyo_texture_system non trouv√©")
            else:
                print("   ‚ùå TEXTURE_SYSTEM_AVAILABLE non trouv√©")
    except Exception as e:
        print(f"   ‚ùå Erreur acc√®s module: {e}")
    
    # 3. V√©rifier les propri√©t√©s de sc√®ne
    print("\n3. PROPRI√âT√âS SC√àNE:")
    scene = bpy.context.scene
    
    props_to_check = [
        'tokyo_use_advanced_textures',
        'tokyo_texture_base_path'
    ]
    
    for prop in props_to_check:
        if hasattr(scene, prop):
            value = getattr(scene, prop)
            print(f"   ‚úÖ {prop}: {value}")
            
            if prop == 'tokyo_texture_base_path' and value:
                # V√©rifier si le chemin existe
                if os.path.exists(value):
                    print(f"       ‚úÖ Chemin existe")
                    # Lister le contenu
                    try:
                        content = os.listdir(value)
                        print(f"       üìÅ Contenu: {content}")
                    except:
                        print(f"       ‚ùå Impossible de lister le contenu")
                else:
                    print(f"       ‚ùå Chemin n'existe pas")
        else:
            print(f"   ‚ùå {prop}: manquant")
    
    # 4. V√©rifier les objets Tokyo
    print("\n4. OBJETS TOKYO:")
    tokyo_objects = [obj for obj in bpy.data.objects if 'tokyo' in obj.name.lower()]
    
    if tokyo_objects:
        print(f"   ‚úÖ {len(tokyo_objects)} objets Tokyo trouv√©s")
        
        # Analyser les premiers objets
        buildings = [obj for obj in tokyo_objects if 'building' in obj.name.lower()]
        print(f"   üè¢ {len(buildings)} b√¢timents")
        
        if buildings:
            # Analyser le premier b√¢timent en d√©tail
            first_building = buildings[0]
            print(f"\n   üîç ANALYSE: {first_building.name}")
            print(f"       üìè Dimensions: {first_building.dimensions}")
            print(f"       üì¶ Mat√©riaux: {len(first_building.data.materials)}")
            
            if first_building.data.materials:
                mat = first_building.data.materials[0]
                print(f"       üé® Premier mat√©riau: {mat.name}")
                print(f"       üîó Use nodes: {mat.use_nodes}")
                
                if mat.use_nodes and mat.node_tree:
                    nodes = mat.node_tree.nodes
                    print(f"       üìã Nodes: {len(nodes)}")
                    
                    # Analyser les types de nodes
                    node_types = {}
                    for node in nodes:
                        node_type = node.type
                        if node_type in node_types:
                            node_types[node_type] += 1
                        else:
                            node_types[node_type] = 1
                    
                    print(f"       üìä Types de nodes: {node_types}")
                    
                    # Chercher des textures
                    tex_nodes = [n for n in nodes if n.type == 'TEX_IMAGE']
                    if tex_nodes:
                        print(f"       üñºÔ∏è Textures trouv√©es:")
                        for tex in tex_nodes:
                            if tex.image:
                                print(f"           - {tex.image.name}: {tex.image.filepath}")
                            else:
                                print(f"           - Node texture sans image")
                    else:
                        print(f"       ‚ùå Aucune texture image trouv√©e")
            else:
                print(f"       ‚ùå Aucun mat√©riau assign√©")
    else:
        print("   ‚ùå Aucun objet Tokyo trouv√©")
    
    # 5. Test de cr√©ation de mat√©riau
    print("\n5. TEST CR√âATION MAT√âRIAU:")
    try:
        # Essayer de cr√©er un mat√©riau test
        if 'tokyo_city_generator' in sys.modules:
            module = sys.modules['tokyo_city_generator']
            if hasattr(module, 'tokyo_texture_system') and module.tokyo_texture_system:
                system = module.tokyo_texture_system
                test_mat = system.create_advanced_building_material(
                    "residential", 10.0, 5.0, 5.0, "DiagnosticTest", ""
                )
                if test_mat:
                    print("   ‚úÖ Cr√©ation mat√©riau test r√©ussie")
                    print(f"       üé® Mat√©riau: {test_mat.name}")
                    print(f"       üîó Nodes: {test_mat.use_nodes}")
                    # Nettoyer
                    bpy.data.materials.remove(test_mat)
                else:
                    print("   ‚ùå Cr√©ation mat√©riau test √©chou√©e (None)")
            else:
                print("   ‚ùå tokyo_texture_system non disponible")
        else:
            print("   ‚ùå Module tokyo_city_generator non trouv√©")
    except Exception as e:
        print(f"   ‚ùå Erreur test cr√©ation: {e}")
    
    # 6. Mode d'affichage
    print("\n6. MODE D'AFFICHAGE:")
    for area in bpy.context.screen.areas:
        if area.type == 'VIEW_3D':
            for space in area.spaces:
                if space.type == 'VIEW_3D':
                    mode = space.shading.type
                    print(f"   üé® Mode: {mode}")
                    if mode in ['MATERIAL', 'RENDERED']:
                        print("   ‚úÖ Mode compatible textures")
                    else:
                        print("   ‚ö†Ô∏è Mode pourrait masquer les textures")
    
    print("\n" + "=" * 80)
    print("üéØ FIN DU DIAGNOSTIC")
    print("=" * 80)

# Ex√©cuter le diagnostic
diagnostic_complet()
