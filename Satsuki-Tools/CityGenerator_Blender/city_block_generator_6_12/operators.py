import bpy
import traceback
import sys
import importlib
# Import diff√©r√© de generator pour √©viter les crashes au chargement

# Fonction pour acc√©der aux propri√©t√©s de mani√®re uniforme
def get_citygen_properties(context):
    """Retourne un objet avec les propri√©t√©s city generator"""
    class PropertyAccessor:
        def __init__(self, scene):
            self.scene = scene
        
        @property
        def width(self):
            return getattr(self.scene, 'citygen_width', 5)
        
        @property
        def length(self):
            return getattr(self.scene, 'citygen_length', 5)
        
        @property
        def max_floors(self):
            return getattr(self.scene, 'citygen_max_floors', 8)
        
        @property
        def road_width(self):
            return getattr(self.scene, 'citygen_road_width', 4.0)
        
        @property
        def buildings_per_block(self):
            return getattr(self.scene, 'citygen_buildings_per_block', 1)
        
        @property
        def seamless_roads(self):
            return getattr(self.scene, 'citygen_seamless_roads', True)
        
        @property
        def building_variety(self):
            return getattr(self.scene, 'citygen_building_variety', 'MEDIUM')
        
        @property
        def height_variation(self):
            return getattr(self.scene, 'citygen_height_variation', 0.5)
    
    return PropertyAccessor(context.scene)

class CITYGEN_OT_Generate(bpy.types.Operator):
    bl_idname = "citygen.generate_city"
    bl_label = "G√©n√©rer Quartier"
    bl_description = "G√©n√®re un quartier complet avec b√¢timents, routes et trottoirs"
    bl_options = {'REGISTER', 'UNDO'}
    
    def execute(self, context):
        try:
            # Validation pr√©liminaire du contexte
            if not context:
                self.report({'ERROR'}, "Contexte Blender invalide")
                return {'CANCELLED'}
            
            # Import diff√©r√© pour √©viter les crashes de chargement
            try:
                from .generator import generate_city
            except Exception as import_error:
                self.report({'ERROR'}, f"Impossible d'importer le g√©n√©rateur: {import_error}")
                return {'CANCELLED'}
            
            # Tentative de g√©n√©ration AVEC B√ÇTIMENTS (regen_only=False explicite)
            print("üöÄ OP√âRATEUR: Appel generate_city avec regen_only=False EXPLICITE")
            success = generate_city(context, regen_only=False)
            
            if success:
                self.report({'INFO'}, "Quartier g√©n√©r√© avec succ√®s")
                return {'FINISHED'}
            else:
                self.report({'ERROR'}, "√âchec de la g√©n√©ration du quartier")
                return {'CANCELLED'}
                
        except Exception as e:
            error_msg = f"Erreur lors de la g√©n√©ration: {str(e)}"
            print(f"ERREUR CRITIQUE dans CITYGEN_OT_Generate: {error_msg}")
            print(f"Traceback: {traceback.format_exc()}")
            self.report({'ERROR'}, error_msg)
            return {'CANCELLED'}

class CITYGEN_OT_RegenRoads(bpy.types.Operator):
    bl_idname = "citygen.regenerate_roads_sidewalks"
    bl_label = "R√©g√©n√©rer Routes et Trottoirs"
    bl_description = "R√©g√©n√®re uniquement les routes et trottoirs"
    bl_options = {'REGISTER', 'UNDO'}
    
    def execute(self, context):
        try:
            # Validation pr√©liminaire du contexte
            if not context:
                self.report({'ERROR'}, "Contexte Blender invalide")
                return {'CANCELLED'}
            
            # Import diff√©r√© pour √©viter les crashes de chargement
            try:
                from .generator import regenerate_roads_and_sidewalks
            except Exception as import_error:
                self.report({'ERROR'}, f"Impossible d'importer le g√©n√©rateur: {import_error}")
                return {'CANCELLED'}
            
            # Tentative de r√©g√©n√©ration
            success = regenerate_roads_and_sidewalks(context)
            
            if success:
                self.report({'INFO'}, "Routes et trottoirs r√©g√©n√©r√©s avec succ√®s")
                return {'FINISHED'}
            else:
                self.report({'ERROR'}, "√âchec de la r√©g√©n√©ration des routes et trottoirs")
                return {'CANCELLED'}
                
        except Exception as e:
            error_msg = f"Erreur lors de la r√©g√©n√©ration: {str(e)}"
            print(f"ERREUR CRITIQUE dans CITYGEN_OT_RegenRoads: {error_msg}")
            print(f"Traceback: {traceback.format_exc()}")
            self.report({'ERROR'}, error_msg)
            return {'CANCELLED'}

class CITYGEN_OT_Diagnostic(bpy.types.Operator):
    bl_idname = "citygen.diagnostic"
    bl_label = "Diagnostic Addon"
    bl_description = "Effectue un diagnostic complet de l'addon"
    bl_options = {'REGISTER'}
    
    def execute(self, context):
        try:
            print("\n=== DIAGNOSTIC CITY BLOCK GENERATOR ===")
            
            # V√©rification de base
            print("üìã Informations de base:")
            print(f"   ‚Ä¢ Version Blender: {bpy.app.version_string}")
            print(f"   ‚Ä¢ Sc√®ne active: {context.scene.name}")
            
            # V√©rification des propri√©t√©s
            print("\nüîß V√©rification des propri√©t√©s:")
            props = get_citygen_properties(context)
            try:
                print(f"   ‚Ä¢ Largeur: {props.width}")
                print(f"   ‚Ä¢ Longueur: {props.length}")
                print(f"   ‚Ä¢ √âtages max: {props.max_floors}")
                print(f"   ‚Ä¢ Largeur routes: {props.road_width}")
                print("   ‚úÖ Toutes les propri√©t√©s accessibles")
            except Exception as e:
                print(f"   ‚ùå Erreur d'acc√®s aux propri√©t√©s: {e}")
            
            print("=== FIN DIAGNOSTIC ===")
            self.report({'INFO'}, "Diagnostic termin√© - voir console")
            return {'FINISHED'}
            
        except Exception as e:
            error_msg = f"Erreur durant le diagnostic: {str(e)}"
            print(f"‚ùå ERREUR DIAGNOSTIC: {error_msg}")
            self.report({'ERROR'}, error_msg)
            return {'CANCELLED'}

# SOLUTION ALTERNATIVE: Propri√©t√©s directes sans PropertyGroup
def get_city_properties():
    """Retourne les d√©finitions de propri√©t√©s pour l'addon"""
    return {
        'citygen_width': bpy.props.IntProperty(
            name="Largeur", 
            description="Largeur de la grille de ville",
            default=5, 
            min=1, 
            max=50
        ),
        'citygen_length': bpy.props.IntProperty(
            name="Longueur", 
            description="Longueur de la grille de ville",
            default=5, 
            min=1, 
            max=50
        ),
        'citygen_max_floors': bpy.props.IntProperty(
            name="√âtages max", 
            description="Nombre maximum d'√©tages",
            default=8, 
            min=1, 
            max=100
        ),
        'citygen_road_width': bpy.props.FloatProperty(
            name="Largeur des routes",
            description="Largeur des routes en unit√©s Blender",
            default=4.0,
            min=0.5,
            max=20.0
        ),
        'citygen_buildings_per_block': bpy.props.IntProperty(
            name="B√¢timents par bloc",
            description="Nombre de b√¢timents √† g√©n√©rer par bloc",
            default=1,
            min=1,
            max=9
        ),
        'citygen_seamless_roads': bpy.props.BoolProperty(
            name="Routes coll√©es",
            description="Coller les routes aux trottoirs (pas d'espace)",
            default=True
        ),
        'citygen_building_variety': bpy.props.EnumProperty(
            name="Vari√©t√© des formes",
            description="Niveau de vari√©t√© des formes de b√¢timents",
            items=[
                ('LOW', 'Faible', 'Principalement rectangulaires'),
                ('MEDIUM', 'Moyenne', 'M√©lange √©quilibr√© de formes'),
                ('HIGH', '√âlev√©e', 'Maximum de vari√©t√© et formes complexes'),
                ('MODERN', 'Moderne', 'Tours et gratte-ciels'),
                ('CREATIVE', 'Cr√©atif', 'Formes artistiques et uniques')
            ],
            default='MEDIUM'
        ),
        'citygen_height_variation': bpy.props.FloatProperty(
            name="Variation hauteur",
            description="Facteur de variation des hauteurs (0.0 = uniforme, 1.0 = tr√®s vari√©)",
            default=0.5,
            min=0.0,
            max=1.0
        )
    }

classes = [CITYGEN_OT_Generate, CITYGEN_OT_RegenRoads, CITYGEN_OT_Diagnostic]

def register():
    """Enregistre les classes avec gestion d'erreurs robuste - Version simplifi√©e"""
    try:
        print("=== D√©but d'enregistrement City Block Generator ===")
        
        # √âTAPE 1: Enregistrer les propri√©t√©s directement sur Scene
        try:
            print("üîπ Enregistrement des propri√©t√©s directes...")
            city_props = get_city_properties()
            
            for prop_name, prop_def in city_props.items():
                setattr(bpy.types.Scene, prop_name, prop_def)
                print(f"   ‚úì Propri√©t√© {prop_name} enregistr√©e")
            
            print("‚úÖ Toutes les propri√©t√©s enregistr√©es avec succ√®s")
                
        except Exception as e:
            print(f"‚ùå ERREUR CRITIQUE: Impossible d'enregistrer les propri√©t√©s: {e}")
            return
        
        # √âTAPE 2: Enregistrer les classes (op√©rateurs, etc.)
        for i, cls in enumerate(classes):
            try:
                print(f"üîπ Enregistrement {cls.__name__}...")
                bpy.utils.register_class(cls)
                print(f"‚úÖ {cls.__name__} enregistr√©e avec succ√®s")
                
            except Exception as e:
                print(f"‚ùå ERREUR lors de l'enregistrement de {cls.__name__}: {str(e)}")
                # Continuer avec les autres classes
        
        print("=== City Block Generator: Enregistrement termin√© ===")
        
    except Exception as e:
        print(f"‚ùå ERREUR CRITIQUE lors de l'enregistrement: {str(e)}")
        print(f"Traceback: {traceback.format_exc()}")

def unregister():
    """D√©senregistre les classes avec gestion d'erreurs robuste"""
    try:
        print("=== D√©but de d√©senregistrement City Block Generator ===")
        
        # D√©senregistrer les propri√©t√©s
        try:
            city_props = get_city_properties()
            for prop_name in city_props.keys():
                if hasattr(bpy.types.Scene, prop_name):
                    delattr(bpy.types.Scene, prop_name)
                    print(f"Propri√©t√© {prop_name} d√©senregistr√©e")
        except Exception as e:
            print(f"Erreur lors du d√©senregistrement des propri√©t√©s: {e}")
        
        # D√©senregistrer chaque classe individuellement
        for cls in reversed(classes):
            try:
                bpy.utils.unregister_class(cls)
                print(f"Classe {cls.__name__} d√©senregistr√©e avec succ√®s")
            except Exception as e:
                print(f"ERREUR lors du d√©senregistrement de {cls.__name__}: {str(e)}")
        
        print("=== City Block Generator: D√©senregistrement termin√© ===")
        
    except Exception as e:
        print(f"ERREUR CRITIQUE lors du d√©senregistrement: {str(e)}")
        print(f"Traceback: {traceback.format_exc()}")
