#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de validation du package City Block Generator CLEAN
V√©rifie que l'addon peut √™tre charg√© correctement dans Blender
"""

import sys
import os
import zipfile
import tempfile
import shutil

def validate_zip_structure(zip_path):
    """Valide la structure du ZIP"""
    print("=== VALIDATION STRUCTURE ZIP ===")
    
    try:
        with zipfile.ZipFile(zip_path, 'r') as zip_file:
            files = zip_file.namelist()
            print(f"Fichiers trouv√©s: {len(files)}")
            
            required_files = [
                'city_block_generator_clean/__init__.py',
                'city_block_generator_clean/operators.py', 
                'city_block_generator_clean/ui.py',
                'city_block_generator_clean/generator.py'
            ]
            
            missing_files = []
            for required_file in required_files:
                if required_file not in files:
                    missing_files.append(required_file)
                else:
                    print(f"‚úÖ {required_file}")
            
            if missing_files:
                print("‚ùå Fichiers manquants:")
                for missing in missing_files:
                    print(f"   - {missing}")
                return False
            
            print("‚úÖ Structure ZIP valide")
            return True
            
    except Exception as e:
        print(f"‚ùå Erreur validation ZIP: {e}")
        return False

def validate_python_syntax(zip_path):
    """Valide la syntaxe Python des fichiers"""
    print("\\n=== VALIDATION SYNTAXE PYTHON ===")
    
    try:
        with tempfile.TemporaryDirectory() as temp_dir:
            # Extraire le ZIP
            with zipfile.ZipFile(zip_path, 'r') as zip_file:
                zip_file.extractall(temp_dir)
            
            addon_dir = os.path.join(temp_dir, 'city_block_generator_clean')
            python_files = ['__init__.py', 'operators.py', 'ui.py', 'generator.py']
            
            for py_file in python_files:
                file_path = os.path.join(addon_dir, py_file)
                if os.path.exists(file_path):
                    try:
                        with open(file_path, 'r', encoding='utf-8') as f:
                            code = f.read()
                        
                        # Compilation syntaxique
                        compile(code, file_path, 'exec')
                        print(f"‚úÖ {py_file} - syntaxe valide")
                        
                    except SyntaxError as e:
                        print(f"‚ùå {py_file} - Erreur syntaxe: {e}")
                        return False
                    except Exception as e:
                        print(f"‚ö†Ô∏è {py_file} - Avertissement: {e}")
                else:
                    print(f"‚ùå {py_file} - fichier manquant")
                    return False
            
            print("‚úÖ Syntaxe Python valide")
            return True
            
    except Exception as e:
        print(f"‚ùå Erreur validation syntaxe: {e}")
        return False

def validate_blender_compatibility(zip_path):
    """Valide la compatibilit√© Blender basique"""
    print("\\n=== VALIDATION COMPATIBILIT√â BLENDER ===")
    
    try:
        with tempfile.TemporaryDirectory() as temp_dir:
            # Extraire le ZIP
            with zipfile.ZipFile(zip_path, 'r') as zip_file:
                zip_file.extractall(temp_dir)
            
            addon_dir = os.path.join(temp_dir, 'city_block_generator_clean')
            init_file = os.path.join(addon_dir, '__init__.py')
            
            # V√©rifier bl_info
            with open(init_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            if 'bl_info' not in content:
                print("‚ùå bl_info manquant dans __init__.py")
                return False
            
            # V√©rifier les imports Blender basiques
            required_imports = ['import bpy']
            for imp in required_imports:
                if imp not in content:
                    print(f"‚ùå Import manquant: {imp}")
                    return False
            
            # V√©rifier les fonctions register/unregister
            if 'def register(' not in content:
                print("‚ùå Fonction register() manquante")
                return False
                
            if 'def unregister(' not in content:
                print("‚ùå Fonction unregister() manquante")
                return False
            
            print("‚úÖ Compatibilit√© Blender basique valid√©e")
            print("‚úÖ bl_info pr√©sent")
            print("‚úÖ Fonctions register/unregister pr√©sentes")
            return True
            
    except Exception as e:
        print(f"‚ùå Erreur validation Blender: {e}")
        return False

def validate_variety_features(zip_path):
    """Valide la pr√©sence des fonctionnalit√©s de vari√©t√©"""
    print("\\n=== VALIDATION FONCTIONNALIT√âS VARI√âT√â ===")
    
    try:
        with tempfile.TemporaryDirectory() as temp_dir:
            # Extraire le ZIP
            with zipfile.ZipFile(zip_path, 'r') as zip_file:
                zip_file.extractall(temp_dir)
            
            addon_dir = os.path.join(temp_dir, 'city_block_generator_clean')
            
            # V√©rifier generator.py pour les nouvelles fonctions
            generator_file = os.path.join(addon_dir, 'generator.py')
            with open(generator_file, 'r', encoding='utf-8') as f:
                generator_content = f.read()
            
            variety_functions = [
                'create_varied_material',
                'choose_building_type', 
                'add_urban_variety'
            ]
            
            for func in variety_functions:
                if func in generator_content:
                    print(f"‚úÖ Fonction {func} pr√©sente")
                else:
                    print(f"‚ùå Fonction {func} manquante")
                    return False
            
            # V√©rifier operators.py pour les propri√©t√©s
            operators_file = os.path.join(addon_dir, 'operators.py')
            with open(operators_file, 'r', encoding='utf-8') as f:
                operators_content = f.read()
            
            if 'citygen_building_variety' in operators_content:
                print("‚úÖ Propri√©t√© building_variety pr√©sente")
            else:
                print("‚ùå Propri√©t√© building_variety manquante")
                return False
            
            print("‚úÖ Fonctionnalit√©s de vari√©t√© valid√©es")
            return True
            
    except Exception as e:
        print(f"‚ùå Erreur validation vari√©t√©: {e}")
        return False

def run_complete_validation():
    """Ex√©cute toutes les validations"""
    zip_path = "city_block_generator_v6_13_8_CLEAN.zip"
    
    print("VALIDATION COMPL√àTE - CITY BLOCK GENERATOR CLEAN")
    print("=" * 55)
    
    if not os.path.exists(zip_path):
        print(f"‚ùå Fichier ZIP non trouv√©: {zip_path}")
        return False
    
    print(f"üì¶ Validation du fichier: {zip_path}")
    file_size = os.path.getsize(zip_path) / 1024  # KB
    print(f"üìä Taille: {file_size:.1f} KB")
    print()
    
    validations = [
        ("Structure ZIP", validate_zip_structure),
        ("Syntaxe Python", validate_python_syntax),
        ("Compatibilit√© Blender", validate_blender_compatibility),
        ("Fonctionnalit√©s Vari√©t√©", validate_variety_features)
    ]
    
    results = {}
    for name, validator in validations:
        try:
            results[name] = validator(zip_path)
        except Exception as e:
            print(f"‚ùå Erreur {name}: {e}")
            results[name] = False
    
    print("\\n=== R√âSUM√â VALIDATION ===")
    all_passed = True
    for name, passed in results.items():
        status = "‚úÖ PASS√â" if passed else "‚ùå √âCHEC"
        print(f"{name}: {status}")
        if not passed:
            all_passed = False
    
    print()
    if all_passed:
        print("üéâ VALIDATION COMPL√àTE R√âUSSIE!")
        print("üöÄ L'addon est pr√™t pour Blender")
        print()
        print("INSTRUCTIONS D'INSTALLATION:")
        print("1. Ouvrir Blender")
        print("2. Edit > Preferences > Add-ons") 
        print("3. Install > S√©lectionner city_block_generator_v6_13_8_CLEAN.zip")
        print("4. Activer 'City Block Generator'")
        print("5. Utiliser le panneau CityGen dans la sidebar 3D")
        print()
        print("NOUVELLES FONCTIONNALIT√âS:")
        print("‚Ä¢ 6x plus de vari√©t√© visuelle")
        print("‚Ä¢ 18 couleurs par zone")
        print("‚Ä¢ 10 types de b√¢timents")
        print("‚Ä¢ Variations urbaines")
        return 0
    else:
        print("‚ùå VALIDATION √âCHOU√âE!")
        print("Des corrections sont n√©cessaires.")
        return 1

if __name__ == "__main__":
    try:
        exit_code = run_complete_validation()
        sys.exit(exit_code)
    except Exception as e:
        print(f"ERREUR FATALE: {e}")
        sys.exit(1)