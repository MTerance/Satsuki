"""
D√©monstration du mode district - √Ä ex√©cuter dans Blender Text Editor
Copier-coller ce code dans l'√©diteur de texte de Blender et l'ex√©cuter.
"""

import bpy

def demo_district_mode():
    """D√©monstration du mode district avec diff√©rentes configurations."""
    
    print("=" * 50)
    print("D√âMONSTRATION DU MODE DISTRICT")
    print("=" * 50)
    
    # Nettoyer la sc√®ne
    bpy.ops.object.select_all(action='SELECT')
    bpy.ops.object.delete(use_global=False)
    
    # V√©rifier les propri√©t√©s
    if not hasattr(bpy.context.scene, 'citygen_props'):
        print("ERREUR: Propri√©t√©s citygen_props non trouv√©es !")
        print("Assurez-vous que l'addon City Block Generator est activ√©.")
        return
    
    props = bpy.context.scene.citygen_props
    
    # Configuration pour une d√©monstration efficace
    print("\nConfiguration du mode district:")
    props.width = 7
    props.length = 7
    props.max_floors = 15
    props.shape_mode = 'AUTO'
    props.block_variety = 'HIGH'
    props.base_block_size = 12.0
    props.district_mode = True
    props.commercial_ratio = 0.35  # Plus de commercial pour voir la diff√©rence
    props.residential_ratio = 0.45
    props.industrial_ratio = 0.20
    
    print(f"‚úì Grille: {props.width}x{props.length}")
    print(f"‚úì Mode district: {props.district_mode}")
    print(f"‚úì Vari√©t√©: {props.block_variety}")
    print(f"‚úì Taille de base: {props.base_block_size}")
    print(f"‚úì Ratios - Commercial: {props.commercial_ratio}, R√©sidentiel: {props.residential_ratio}, Industriel: {props.industrial_ratio}")
    
    # G√©n√©rer le quartier
    print("\nG√©n√©ration du quartier...")
    try:
        result = bpy.ops.citygen.generate_city()
        if result == {'FINISHED'}:
            print("‚úì Quartier g√©n√©r√© avec succ√®s !")
            analyze_district_result()
        else:
            print("‚úó √âchec de la g√©n√©ration")
    except Exception as e:
        print(f"‚úó Erreur: {e}")

def analyze_district_result():
    """Analyse le r√©sultat de la g√©n√©ration en mode district."""
    
    print("\nAnalyse du r√©sultat:")
    
    # Compter les objets
    all_objects = list(bpy.context.scene.objects)
    buildings = [obj for obj in all_objects if 'building' in obj.name.lower() or 'bloc' in obj.name.lower()]
    roads = [obj for obj in all_objects if 'road' in obj.name.lower() or 'route' in obj.name.lower()]
    sidewalks = [obj for obj in all_objects if 'sidewalk' in obj.name.lower() or 'trottoir' in obj.name.lower()]
    
    print(f"üìä Objets g√©n√©r√©s:")
    print(f"   - B√¢timents/Blocs: {len(buildings)}")
    print(f"   - Routes: {len(roads)}")
    print(f"   - Trottoirs: {len(sidewalks)}")
    print(f"   - Total: {len(all_objects)}")
    
    if buildings:
        # Analyser la vari√©t√© des b√¢timents
        building_data = []
        for building in buildings:
            if building.dimensions:
                width = building.dimensions.x
                length = building.dimensions.y
                height = building.dimensions.z
                area = width * length
                building_data.append({
                    'name': building.name,
                    'area': area,
                    'height': height,
                    'width': width,
                    'length': length
                })
        
        if building_data:
            # Statistiques des tailles
            areas = [b['area'] for b in building_data]
            heights = [b['height'] for b in building_data]
            
            print(f"\nüìè Vari√©t√© des b√¢timents:")
            print(f"   - Superficie min: {min(areas):.1f} u¬≤")
            print(f"   - Superficie max: {max(areas):.1f} u¬≤")
            print(f"   - Superficie moyenne: {sum(areas)/len(areas):.1f} u¬≤")
            print(f"   - Hauteur min: {min(heights):.1f} u")
            print(f"   - Hauteur max: {max(heights):.1f} u")
            print(f"   - Hauteur moyenne: {sum(heights)/len(heights):.1f} u")
            
            # Identifier les types probables
            sorted_by_area = sorted(building_data, key=lambda x: x['area'])
            small_buildings = [b for b in building_data if b['area'] < sum(areas)/len(areas) * 0.8]
            large_buildings = [b for b in building_data if b['area'] > sum(areas)/len(areas) * 1.2]
            
            print(f"\nüè¢ R√©partition probable des types:")
            print(f"   - Petits b√¢timents (r√©sidentiel): {len(small_buildings)}")
            print(f"   - B√¢timents moyens: {len(building_data) - len(small_buildings) - len(large_buildings)}")
            print(f"   - Grands b√¢timents (commercial/industriel): {len(large_buildings)}")
    
    # V√©rifier les mat√©riaux
    materials = set()
    for obj in all_objects:
        if obj.data and hasattr(obj.data, 'materials'):
            for mat in obj.data.materials:
                if mat:
                    materials.add(mat.name)
    
    if materials:
        print(f"\nüé® Mat√©riaux utilis√©s: {len(materials)}")
        for mat in sorted(materials):
            print(f"   - {mat}")
    
    print(f"\n‚úÖ Analyse termin√©e !")
    print(f"üí° Regardez la vue 3D pour observer la r√©partition des zones.")
    print(f"üí° Les b√¢timents de tailles diff√©rentes repr√©sentent les zones urbaines.")

# Ex√©cuter la d√©monstration
demo_district_mode()
